# This is an autogenerated file for dynamic methods in Commit
# Please rerun bundle exec rake rails_rbi:models[Commit] to regenerate.

# typed: strong
module Commit::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module Commit::GeneratedAttributeMethods
  sig { returns(T.nilable(String)) }
  def account_id; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def account_id=(value); end

  sig { returns(T::Boolean) }
  def account_id?; end

  sig { returns(T.any(T::Array[T.untyped], T::Boolean, Float, T::Hash[T.untyped, T.untyped], Integer, String)) }
  def author; end

  sig { params(value: T.any(T::Array[T.untyped], T::Boolean, Float, T::Hash[T.untyped, T.untyped], Integer, String)).void }
  def author=(value); end

  sig { returns(T::Boolean) }
  def author?; end

  sig { returns(T.nilable(String)) }
  def changelog_id; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def changelog_id=(value); end

  sig { returns(T::Boolean) }
  def changelog_id?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def commited; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def commited=(value); end

  sig { returns(T::Boolean) }
  def commited?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def created_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T.nilable(ActiveSupport::TimeWithZone)) }
  def discarded; end

  sig { params(value: T.nilable(T.any(Date, Time, ActiveSupport::TimeWithZone))).void }
  def discarded=(value); end

  sig { returns(T::Boolean) }
  def discarded?; end

  sig { returns(String) }
  def id; end

  sig { params(value: T.any(String, Symbol)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(String) }
  def message; end

  sig { params(value: T.any(String, Symbol)).void }
  def message=(value); end

  sig { returns(T::Boolean) }
  def message?; end

  sig { returns(T.any(T::Array[T.untyped], T::Boolean, Float, T::Hash[T.untyped, T.untyped], Integer, String)) }
  def providers; end

  sig { params(value: T.any(T::Array[T.untyped], T::Boolean, Float, T::Hash[T.untyped, T.untyped], Integer, String)).void }
  def providers=(value); end

  sig { returns(T::Boolean) }
  def providers?; end

  sig { returns(T.nilable(String)) }
  def repository_id; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def repository_id=(value); end

  sig { returns(T::Boolean) }
  def repository_id?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def updated_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end

  sig { returns(String) }
  def url; end

  sig { params(value: T.any(String, Symbol)).void }
  def url=(value); end

  sig { returns(T::Boolean) }
  def url?; end
end

module Commit::GeneratedAssociationMethods
  sig { returns(::Account) }
  def account; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Account).void)).returns(::Account) }
  def build_account(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Account).void)).returns(::Account) }
  def create_account(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Account).void)).returns(::Account) }
  def create_account!(*args, &block); end

  sig { params(value: ::Account).void }
  def account=(value); end

  sig { returns(::Account) }
  def reload_account; end

  sig { returns(T.nilable(::Changelog)) }
  def changelog; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Changelog).void)).returns(::Changelog) }
  def build_changelog(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Changelog).void)).returns(::Changelog) }
  def create_changelog(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Changelog).void)).returns(::Changelog) }
  def create_changelog!(*args, &block); end

  sig { params(value: T.nilable(::Changelog)).void }
  def changelog=(value); end

  sig { returns(T.nilable(::Changelog)) }
  def reload_changelog; end

  sig { returns(::Repository) }
  def repository; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Repository).void)).returns(::Repository) }
  def build_repository(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Repository).void)).returns(::Repository) }
  def create_repository(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Repository).void)).returns(::Repository) }
  def create_repository!(*args, &block); end

  sig { params(value: ::Repository).void }
  def repository=(value); end

  sig { returns(::Repository) }
  def reload_repository; end

  sig { returns(::PaperTrail::Version::ActiveRecord_Associations_CollectionProxy) }
  def versions; end

  sig { returns(T::Array[Integer]) }
  def version_ids; end

  sig { params(value: T::Enumerable[::PaperTrail::Version]).void }
  def versions=(value); end
end

module Commit::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[Commit]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[Commit]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[Commit]) }
  def find_n(*args); end

  sig { params(id: T.nilable(Integer)).returns(T.nilable(Commit)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(Commit) }
  def find_by_id!(id); end
end

class Commit < ApplicationRecord
  include Commit::GeneratedAttributeMethods
  include Commit::GeneratedAssociationMethods
  extend Commit::CustomFinderMethods
  extend Commit::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(Commit::ActiveRecord_Relation, Commit::ActiveRecord_Associations_CollectionProxy, Commit::ActiveRecord_AssociationRelation) }

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def self.commited(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def self.discarded(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def self.kept(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def self.review(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def self.undiscarded(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def self.with_discarded(*args); end
end

class Commit::ActiveRecord_Relation < ActiveRecord::Relation
  include Commit::ActiveRelation_WhereNot
  include Commit::CustomFinderMethods
  include Commit::QueryMethodsReturningRelation
  Elem = type_member {{fixed: Commit}}

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def commited(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def discarded(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def kept(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def review(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def undiscarded(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def with_discarded(*args); end
end

class Commit::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include Commit::ActiveRelation_WhereNot
  include Commit::CustomFinderMethods
  include Commit::QueryMethodsReturningAssociationRelation
  Elem = type_member {{fixed: Commit}}

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def commited(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def discarded(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def kept(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def review(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def undiscarded(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def with_discarded(*args); end
end

class Commit::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Commit::CustomFinderMethods
  include Commit::QueryMethodsReturningAssociationRelation
  Elem = type_member {{fixed: Commit}}

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def commited(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def discarded(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def kept(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def review(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def undiscarded(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def with_discarded(*args); end

  sig { params(records: T.any(Commit, T::Array[Commit])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(Commit, T::Array[Commit])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(Commit, T::Array[Commit])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(Commit, T::Array[Commit])).returns(T.self_type) }
  def concat(*records); end
end

module Commit::QueryMethodsReturningRelation
  sig { returns(Commit::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Commit::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_Relation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: Commit).returns(T::Boolean)).returns(T::Array[Commit]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(Commit::ActiveRecord_Relation) }
  def select_columns(*args); end

  sig { params(args: Symbol).returns(Commit::ActiveRecord_Relation) }
  def where_missing(*args); end

  sig { params(column: Symbol, values: T::Array[T.untyped]).returns(Commit::ActiveRecord_Relation) }
  def in_order_of(column, values); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Commit::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Commit::ActiveRecord_Relation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module Commit::QueryMethodsReturningAssociationRelation
  sig { returns(Commit::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Commit::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Commit::ActiveRecord_AssociationRelation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: Commit).returns(T::Boolean)).returns(T::Array[Commit]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(Commit::ActiveRecord_AssociationRelation) }
  def select_columns(*args); end

  sig { params(args: Symbol).returns(Commit::ActiveRecord_AssociationRelation) }
  def where_missing(*args); end

  sig { params(column: Symbol, values: T::Array[T.untyped]).returns(Commit::ActiveRecord_AssociationRelation) }
  def in_order_of(column, values); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Commit::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Commit::ActiveRecord_AssociationRelation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end
