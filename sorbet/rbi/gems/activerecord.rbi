# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: ignore
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/activerecord/all/activerecord.rbi
#
# activerecord-7.0.2.3

module Arel
  def self.arel_node?(value); end
  def self.fetch_attribute(value, &block); end
  def self.sql(raw_sql); end
  def self.star; end
end
class Arel::ArelError < StandardError
end
class Arel::EmptyJoinError < Arel::ArelError
end
module Arel::Crud
  def compile_delete(key = nil, having_clause = nil, group_values_columns = nil); end
  def compile_insert(values); end
  def compile_update(values, key = nil, having_clause = nil, group_values_columns = nil); end
  def create_insert; end
end
module Arel::FactoryMethods
  def coalesce(*exprs); end
  def create_and(clauses); end
  def create_false; end
  def create_join(to, constraint = nil, klass = nil); end
  def create_on(expr); end
  def create_string_join(to); end
  def create_table_alias(relation, name); end
  def create_true; end
  def grouping(expr); end
  def lower(column); end
end
module Arel::Expressions
  def average; end
  def count(distinct = nil); end
  def extract(field); end
  def maximum; end
  def minimum; end
  def sum; end
end
module Arel::Predications
  def between(other); end
  def concat(other); end
  def contains(other); end
  def does_not_match(other, escape = nil, case_sensitive = nil); end
  def does_not_match_all(others, escape = nil); end
  def does_not_match_any(others, escape = nil); end
  def does_not_match_regexp(other, case_sensitive = nil); end
  def eq(other); end
  def eq_all(others); end
  def eq_any(others); end
  def grouping_all(method_id, others, *extras); end
  def grouping_any(method_id, others, *extras); end
  def gt(right); end
  def gt_all(others); end
  def gt_any(others); end
  def gteq(right); end
  def gteq_all(others); end
  def gteq_any(others); end
  def in(other); end
  def in_all(others); end
  def in_any(others); end
  def infinity?(value); end
  def is_distinct_from(other); end
  def is_not_distinct_from(other); end
  def lt(right); end
  def lt_all(others); end
  def lt_any(others); end
  def lteq(right); end
  def lteq_all(others); end
  def lteq_any(others); end
  def matches(other, escape = nil, case_sensitive = nil); end
  def matches_all(others, escape = nil, case_sensitive = nil); end
  def matches_any(others, escape = nil, case_sensitive = nil); end
  def matches_regexp(other, case_sensitive = nil); end
  def not_between(other); end
  def not_eq(other); end
  def not_eq_all(others); end
  def not_eq_any(others); end
  def not_in(other); end
  def not_in_all(others); end
  def not_in_any(others); end
  def open_ended?(value); end
  def overlaps(other); end
  def quoted_array(others); end
  def quoted_node(other); end
  def unboundable?(value); end
  def when(right); end
end
module Arel::FilterPredications
  def filter(expr); end
end
module Arel::WindowPredications
  def over(expr = nil); end
end
module Arel::Math
  def &(other); end
  def *(other); end
  def +(other); end
  def -(other); end
  def /(other); end
  def <<(other); end
  def >>(other); end
  def ^(other); end
  def |(other); end
  def ~; end
end
module Arel::AliasPredication
  def as(other); end
end
module Arel::OrderPredications
  def asc; end
  def desc; end
end
class Arel::Table
  def ==(other); end
  def [](name, table = nil); end
  def able_to_type_cast?; end
  def alias(name = nil); end
  def eql?(other); end
  def from; end
  def group(*columns); end
  def hash; end
  def having(expr); end
  def initialize(name, as: nil, klass: nil, type_caster: nil); end
  def join(relation, klass = nil); end
  def name; end
  def name=(arg0); end
  def order(*expr); end
  def outer_join(relation); end
  def project(*things); end
  def self.engine; end
  def self.engine=(arg0); end
  def skip(amount); end
  def table_alias; end
  def table_alias=(arg0); end
  def table_name; end
  def take(amount); end
  def type_cast_for_database(attr_name, value); end
  def type_caster; end
  def type_for_attribute(name); end
  def where(condition); end
  include Arel::AliasPredication
  include Arel::FactoryMethods
end
module Arel::Attributes
end
class Anonymous_Struct_16 < Struct
  def name; end
  def name=(_); end
  def relation; end
  def relation=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
end
class Arel::Attributes::Attribute < Anonymous_Struct_16
  def able_to_type_cast?; end
  def lower; end
  def type_cast_for_database(value); end
  def type_caster; end
  include Arel::AliasPredication
  include Arel::Expressions
  include Arel::Math
  include Arel::OrderPredications
  include Arel::Predications
end
module Arel::Visitors
end
class Arel::Visitors::Visitor
  def accept(object, collector = nil); end
  def dispatch; end
  def get_dispatch_cache; end
  def initialize; end
  def self.dispatch_cache; end
  def visit(object, collector = nil); end
end
class Arel::Visitors::UnsupportedVisitError < StandardError
  def initialize(object); end
end
class Arel::Visitors::ToSql < Arel::Visitors::Visitor
  def aggregate(name, o, collector); end
  def bind_block; end
  def build_subselect(key, o); end
  def collect_ctes(children, collector); end
  def collect_nodes_for(nodes, collector, spacer, connector = nil); end
  def collect_optimizer_hints(o, collector); end
  def compile(node, collector = nil); end
  def has_group_by_and_having?(o); end
  def has_join_sources?(o); end
  def has_limit_or_offset_or_orders?(o); end
  def infix_value(o, collector, value); end
  def infix_value_with_paren(o, collector, value, suppress_parens = nil); end
  def initialize(connection); end
  def inject_join(list, collector, join_str); end
  def is_distinct_from(o, collector); end
  def maybe_visit(thing, collector); end
  def prepare_delete_statement(o); end
  def prepare_update_statement(o); end
  def quote(value); end
  def quote_column_name(name); end
  def quote_table_name(name); end
  def sanitize_as_sql_comment(value); end
  def unboundable?(value); end
  def unsupported(o, collector); end
  def visit_ActiveModel_Attribute(o, collector); end
  def visit_ActiveSupport_Multibyte_Chars(o, collector); end
  def visit_ActiveSupport_StringInquirer(o, collector); end
  def visit_Arel_Attributes_Attribute(o, collector); end
  def visit_Arel_Nodes_And(o, collector); end
  def visit_Arel_Nodes_As(o, collector); end
  def visit_Arel_Nodes_Ascending(o, collector); end
  def visit_Arel_Nodes_Assignment(o, collector); end
  def visit_Arel_Nodes_Avg(o, collector); end
  def visit_Arel_Nodes_Between(o, collector); end
  def visit_Arel_Nodes_Bin(o, collector); end
  def visit_Arel_Nodes_BindParam(o, collector); end
  def visit_Arel_Nodes_Case(o, collector); end
  def visit_Arel_Nodes_Casted(o, collector); end
  def visit_Arel_Nodes_Comment(o, collector); end
  def visit_Arel_Nodes_Count(o, collector); end
  def visit_Arel_Nodes_CurrentRow(o, collector); end
  def visit_Arel_Nodes_DeleteStatement(o, collector); end
  def visit_Arel_Nodes_Descending(o, collector); end
  def visit_Arel_Nodes_Distinct(o, collector); end
  def visit_Arel_Nodes_DistinctOn(o, collector); end
  def visit_Arel_Nodes_DoesNotMatch(o, collector); end
  def visit_Arel_Nodes_Else(o, collector); end
  def visit_Arel_Nodes_Equality(o, collector); end
  def visit_Arel_Nodes_Except(o, collector); end
  def visit_Arel_Nodes_Exists(o, collector); end
  def visit_Arel_Nodes_Extract(o, collector); end
  def visit_Arel_Nodes_False(o, collector); end
  def visit_Arel_Nodes_Filter(o, collector); end
  def visit_Arel_Nodes_Following(o, collector); end
  def visit_Arel_Nodes_FullOuterJoin(o, collector); end
  def visit_Arel_Nodes_GreaterThan(o, collector); end
  def visit_Arel_Nodes_GreaterThanOrEqual(o, collector); end
  def visit_Arel_Nodes_Group(o, collector); end
  def visit_Arel_Nodes_Grouping(o, collector); end
  def visit_Arel_Nodes_HomogeneousIn(o, collector); end
  def visit_Arel_Nodes_In(o, collector); end
  def visit_Arel_Nodes_InfixOperation(o, collector); end
  def visit_Arel_Nodes_InnerJoin(o, collector); end
  def visit_Arel_Nodes_InsertStatement(o, collector); end
  def visit_Arel_Nodes_Intersect(o, collector); end
  def visit_Arel_Nodes_IsDistinctFrom(o, collector); end
  def visit_Arel_Nodes_IsNotDistinctFrom(o, collector); end
  def visit_Arel_Nodes_JoinSource(o, collector); end
  def visit_Arel_Nodes_LessThan(o, collector); end
  def visit_Arel_Nodes_LessThanOrEqual(o, collector); end
  def visit_Arel_Nodes_Limit(o, collector); end
  def visit_Arel_Nodes_Lock(o, collector); end
  def visit_Arel_Nodes_Matches(o, collector); end
  def visit_Arel_Nodes_Max(o, collector); end
  def visit_Arel_Nodes_Min(o, collector); end
  def visit_Arel_Nodes_NamedFunction(o, collector); end
  def visit_Arel_Nodes_NamedWindow(o, collector); end
  def visit_Arel_Nodes_Not(o, collector); end
  def visit_Arel_Nodes_NotEqual(o, collector); end
  def visit_Arel_Nodes_NotIn(o, collector); end
  def visit_Arel_Nodes_NotRegexp(o, collector); end
  def visit_Arel_Nodes_NullsFirst(o, collector); end
  def visit_Arel_Nodes_NullsLast(o, collector); end
  def visit_Arel_Nodes_Offset(o, collector); end
  def visit_Arel_Nodes_On(o, collector); end
  def visit_Arel_Nodes_OptimizerHints(o, collector); end
  def visit_Arel_Nodes_Or(o, collector); end
  def visit_Arel_Nodes_OuterJoin(o, collector); end
  def visit_Arel_Nodes_Over(o, collector); end
  def visit_Arel_Nodes_Preceding(o, collector); end
  def visit_Arel_Nodes_Quoted(o, collector); end
  def visit_Arel_Nodes_Range(o, collector); end
  def visit_Arel_Nodes_Regexp(o, collector); end
  def visit_Arel_Nodes_RightOuterJoin(o, collector); end
  def visit_Arel_Nodes_Rows(o, collector); end
  def visit_Arel_Nodes_SelectCore(o, collector); end
  def visit_Arel_Nodes_SelectOptions(o, collector); end
  def visit_Arel_Nodes_SelectStatement(o, collector); end
  def visit_Arel_Nodes_SqlLiteral(o, collector); end
  def visit_Arel_Nodes_StringJoin(o, collector); end
  def visit_Arel_Nodes_Sum(o, collector); end
  def visit_Arel_Nodes_TableAlias(o, collector); end
  def visit_Arel_Nodes_True(o, collector); end
  def visit_Arel_Nodes_UnaryOperation(o, collector); end
  def visit_Arel_Nodes_Union(o, collector); end
  def visit_Arel_Nodes_UnionAll(o, collector); end
  def visit_Arel_Nodes_UnqualifiedColumn(o, collector); end
  def visit_Arel_Nodes_UpdateStatement(o, collector); end
  def visit_Arel_Nodes_ValuesList(o, collector); end
  def visit_Arel_Nodes_When(o, collector); end
  def visit_Arel_Nodes_Window(o, collector); end
  def visit_Arel_Nodes_With(o, collector); end
  def visit_Arel_Nodes_WithRecursive(o, collector); end
  def visit_Arel_SelectManager(o, collector); end
  def visit_Arel_Table(o, collector); end
  def visit_Array(o, collector); end
  def visit_BigDecimal(o, collector); end
  def visit_Class(o, collector); end
  def visit_Date(o, collector); end
  def visit_DateTime(o, collector); end
  def visit_FalseClass(o, collector); end
  def visit_Float(o, collector); end
  def visit_Hash(o, collector); end
  def visit_Integer(o, collector); end
  def visit_NilClass(o, collector); end
  def visit_Set(o, collector); end
  def visit_String(o, collector); end
  def visit_Symbol(o, collector); end
  def visit_Time(o, collector); end
  def visit_TrueClass(o, collector); end
end
class Arel::Visitors::SQLite < Arel::Visitors::ToSql
  def visit_Arel_Nodes_False(o, collector); end
  def visit_Arel_Nodes_IsDistinctFrom(o, collector); end
  def visit_Arel_Nodes_IsNotDistinctFrom(o, collector); end
  def visit_Arel_Nodes_Lock(o, collector); end
  def visit_Arel_Nodes_SelectStatement(o, collector); end
  def visit_Arel_Nodes_True(o, collector); end
end
class Arel::Visitors::PostgreSQL < Arel::Visitors::ToSql
  def bind_block; end
  def grouping_array_or_grouping_element(o, collector); end
  def grouping_parentheses(o, collector); end
  def visit_Arel_Nodes_Cube(o, collector); end
  def visit_Arel_Nodes_DistinctOn(o, collector); end
  def visit_Arel_Nodes_DoesNotMatch(o, collector); end
  def visit_Arel_Nodes_GroupingElement(o, collector); end
  def visit_Arel_Nodes_GroupingSet(o, collector); end
  def visit_Arel_Nodes_IsDistinctFrom(o, collector); end
  def visit_Arel_Nodes_IsNotDistinctFrom(o, collector); end
  def visit_Arel_Nodes_Lateral(o, collector); end
  def visit_Arel_Nodes_Matches(o, collector); end
  def visit_Arel_Nodes_NotRegexp(o, collector); end
  def visit_Arel_Nodes_Regexp(o, collector); end
  def visit_Arel_Nodes_RollUp(o, collector); end
end
class Arel::Visitors::MySQL < Arel::Visitors::ToSql
  def build_subselect(key, o); end
  def prepare_delete_statement(o); end
  def prepare_update_statement(o); end
  def visit_Arel_Nodes_Bin(o, collector); end
  def visit_Arel_Nodes_Concat(o, collector); end
  def visit_Arel_Nodes_IsDistinctFrom(o, collector); end
  def visit_Arel_Nodes_IsNotDistinctFrom(o, collector); end
  def visit_Arel_Nodes_NotRegexp(o, collector); end
  def visit_Arel_Nodes_NullsFirst(o, collector); end
  def visit_Arel_Nodes_Regexp(o, collector); end
  def visit_Arel_Nodes_SelectCore(o, collector); end
  def visit_Arel_Nodes_SelectStatement(o, collector); end
  def visit_Arel_Nodes_UnqualifiedColumn(o, collector); end
end
class Arel::Visitors::Dot < Arel::Visitors::Visitor
  def accept(object, collector); end
  def edge(name); end
  def initialize; end
  def quote(string); end
  def to_dot; end
  def visit(o); end
  def visit_ActiveModel_Attribute(o); end
  def visit_Arel_Attributes_Attribute(o); end
  def visit_Arel_Nodes_And(o); end
  def visit_Arel_Nodes_Binary(o); end
  def visit_Arel_Nodes_BindParam(o); end
  def visit_Arel_Nodes_Case(o); end
  def visit_Arel_Nodes_Casted(o); end
  def visit_Arel_Nodes_Comment(o); end
  def visit_Arel_Nodes_Count(o); end
  def visit_Arel_Nodes_CurrentRow(o); end
  def visit_Arel_Nodes_DeleteStatement(o); end
  def visit_Arel_Nodes_Distinct(o); end
  def visit_Arel_Nodes_Extract(o); end
  def visit_Arel_Nodes_Function(o); end
  def visit_Arel_Nodes_HomogeneousIn(o); end
  def visit_Arel_Nodes_InfixOperation(o); end
  def visit_Arel_Nodes_InsertStatement(o); end
  def visit_Arel_Nodes_NamedFunction(o); end
  def visit_Arel_Nodes_NamedWindow(o); end
  def visit_Arel_Nodes_NotRegexp(o); end
  def visit_Arel_Nodes_Ordering(o); end
  def visit_Arel_Nodes_Regexp(o); end
  def visit_Arel_Nodes_SelectCore(o); end
  def visit_Arel_Nodes_SelectStatement(o); end
  def visit_Arel_Nodes_SqlLiteral(o); end
  def visit_Arel_Nodes_StringJoin(o); end
  def visit_Arel_Nodes_TableAlias(o); end
  def visit_Arel_Nodes_Unary(o); end
  def visit_Arel_Nodes_UnaryOperation(o); end
  def visit_Arel_Nodes_UpdateStatement(o); end
  def visit_Arel_Nodes_ValuesList(o); end
  def visit_Arel_Nodes_Window(o); end
  def visit_Arel_Nodes_With(o); end
  def visit_Arel_Table(o); end
  def visit_Array(o); end
  def visit_BigDecimal(o); end
  def visit_Date(o); end
  def visit_DateTime(o); end
  def visit_FalseClass(o); end
  def visit_Float(o); end
  def visit_Hash(o); end
  def visit_Integer(o); end
  def visit_NilClass(o); end
  def visit_Set(o); end
  def visit_String(o); end
  def visit_Symbol(o); end
  def visit_Time(o); end
  def visit_TrueClass(o); end
  def visit__children(o); end
  def visit__no_edges(o); end
  def visit__regexp(o); end
  def visit_edge(o, method); end
  def with_node(node); end
end
class Arel::Visitors::Dot::Node
  def fields; end
  def fields=(arg0); end
  def id; end
  def id=(arg0); end
  def initialize(name, id, fields = nil); end
  def name; end
  def name=(arg0); end
end
class Anonymous_Struct_17 < Struct
  def from; end
  def from=(_); end
  def name; end
  def name=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def to; end
  def to=(_); end
end
class Arel::Visitors::Dot::Edge < Anonymous_Struct_17
end
module Arel::Collectors
end
class Arel::Collectors::PlainString
  def <<(str); end
  def initialize; end
  def value; end
end
class Arel::Collectors::SQLString < Arel::Collectors::PlainString
  def add_bind(bind); end
  def add_binds(binds, proc_for_binds = nil, &block); end
  def initialize(*arg0); end
  def preparable; end
  def preparable=(arg0); end
end
class Arel::TreeManager
  def ast; end
  def initialize_copy(other); end
  def to_dot; end
  def to_sql(engine = nil); end
  include Arel::FactoryMethods
end
module Arel::TreeManager::StatementMethods
  def key; end
  def key=(key); end
  def offset(offset); end
  def order(*expr); end
  def take(limit); end
  def where(expr); end
  def wheres=(exprs); end
end
class Arel::InsertManager < Arel::TreeManager
  def columns; end
  def create_values(values); end
  def create_values_list(rows); end
  def initialize(table = nil); end
  def insert(fields); end
  def into(table); end
  def select(select); end
  def values=(val); end
end
class Arel::SelectManager < Arel::TreeManager
  def as(other); end
  def collapse(exprs); end
  def comment(*values); end
  def constraints; end
  def distinct(value = nil); end
  def distinct_on(value); end
  def except(other); end
  def exists; end
  def from(table); end
  def froms; end
  def group(*columns); end
  def having(expr); end
  def initialize(table = nil); end
  def initialize_copy(other); end
  def intersect(other); end
  def join(relation, klass = nil); end
  def join_sources; end
  def lateral(table_name = nil); end
  def limit; end
  def limit=(limit); end
  def lock(locking = nil); end
  def locked; end
  def minus(other); end
  def offset; end
  def offset=(amount); end
  def on(*exprs); end
  def optimizer_hints(*hints); end
  def order(*expr); end
  def orders; end
  def outer_join(relation); end
  def project(*projections); end
  def projections; end
  def projections=(projections); end
  def skip(amount); end
  def source; end
  def take(limit); end
  def taken; end
  def union(operation, other = nil); end
  def where(expr); end
  def where_sql(engine = nil); end
  def window(name); end
  def with(*subqueries); end
  include Arel::Crud
end
class Arel::UpdateManager < Arel::TreeManager
  def group(columns); end
  def having(expr); end
  def initialize(table = nil); end
  def set(values); end
  def table(table); end
  include Arel::TreeManager::StatementMethods
end
class Arel::DeleteManager < Arel::TreeManager
  def from(relation); end
  def group(columns); end
  def having(expr); end
  def initialize(table = nil); end
  include Arel::TreeManager::StatementMethods
end
module Arel::Nodes
  def self.build_quoted(other, attribute = nil); end
end
class Arel::Nodes::Node
  def and(right); end
  def equality?; end
  def fetch_attribute; end
  def invert; end
  def not; end
  def or(right); end
  def to_sql(engine = nil); end
  include Arel::FactoryMethods
end
class Arel::Nodes::NodeExpression < Arel::Nodes::Node
  include Arel::AliasPredication
  include Arel::Expressions
  include Arel::Math
  include Arel::OrderPredications
  include Arel::Predications
end
class Arel::Nodes::SelectStatement < Arel::Nodes::NodeExpression
  def ==(other); end
  def cores; end
  def eql?(other); end
  def hash; end
  def initialize(relation = nil); end
  def initialize_copy(other); end
  def limit; end
  def limit=(arg0); end
  def lock; end
  def lock=(arg0); end
  def offset; end
  def offset=(arg0); end
  def orders; end
  def orders=(arg0); end
  def with; end
  def with=(arg0); end
end
class Arel::Nodes::SelectCore < Arel::Nodes::Node
  def ==(other); end
  def comment; end
  def comment=(arg0); end
  def eql?(other); end
  def from; end
  def from=(value); end
  def froms; end
  def froms=(value); end
  def groups; end
  def groups=(arg0); end
  def hash; end
  def havings; end
  def havings=(arg0); end
  def initialize(relation = nil); end
  def initialize_copy(other); end
  def optimizer_hints; end
  def optimizer_hints=(arg0); end
  def projections; end
  def projections=(arg0); end
  def set_quantifier; end
  def set_quantifier=(arg0); end
  def source; end
  def source=(arg0); end
  def wheres; end
  def wheres=(arg0); end
  def windows; end
  def windows=(arg0); end
end
class Arel::Nodes::InsertStatement < Arel::Nodes::Node
  def ==(other); end
  def columns; end
  def columns=(arg0); end
  def eql?(other); end
  def hash; end
  def initialize(relation = nil); end
  def initialize_copy(other); end
  def relation; end
  def relation=(arg0); end
  def select; end
  def select=(arg0); end
  def values; end
  def values=(arg0); end
end
class Arel::Nodes::UpdateStatement < Arel::Nodes::Node
  def ==(other); end
  def eql?(other); end
  def groups; end
  def groups=(arg0); end
  def hash; end
  def havings; end
  def havings=(arg0); end
  def initialize(relation = nil); end
  def initialize_copy(other); end
  def key; end
  def key=(arg0); end
  def limit; end
  def limit=(arg0); end
  def offset; end
  def offset=(arg0); end
  def orders; end
  def orders=(arg0); end
  def relation; end
  def relation=(arg0); end
  def values; end
  def values=(arg0); end
  def wheres; end
  def wheres=(arg0); end
end
class Arel::Nodes::BindParam < Arel::Nodes::Node
  def ==(other); end
  def eql?(other); end
  def hash; end
  def infinite?; end
  def initialize(value); end
  def nil?; end
  def unboundable?; end
  def value; end
  def value_before_type_cast; end
end
class Arel::Nodes::Distinct < Arel::Nodes::NodeExpression
  def ==(other); end
  def eql?(other); end
  def hash; end
end
class Arel::Nodes::True < Arel::Nodes::NodeExpression
  def ==(other); end
  def eql?(other); end
  def hash; end
end
class Arel::Nodes::False < Arel::Nodes::NodeExpression
  def ==(other); end
  def eql?(other); end
  def hash; end
end
class Arel::Nodes::Unary < Arel::Nodes::NodeExpression
  def ==(other); end
  def eql?(other); end
  def expr; end
  def expr=(arg0); end
  def hash; end
  def initialize(expr); end
  def value; end
end
class Arel::Nodes::Bin < Arel::Nodes::Unary
end
class Arel::Nodes::Cube < Arel::Nodes::Unary
end
class Arel::Nodes::DistinctOn < Arel::Nodes::Unary
end
class Arel::Nodes::Group < Arel::Nodes::Unary
end
class Arel::Nodes::GroupingElement < Arel::Nodes::Unary
end
class Arel::Nodes::GroupingSet < Arel::Nodes::Unary
end
class Arel::Nodes::Lateral < Arel::Nodes::Unary
end
class Arel::Nodes::Limit < Arel::Nodes::Unary
end
class Arel::Nodes::Lock < Arel::Nodes::Unary
end
class Arel::Nodes::Not < Arel::Nodes::Unary
end
class Arel::Nodes::Offset < Arel::Nodes::Unary
end
class Arel::Nodes::On < Arel::Nodes::Unary
end
class Arel::Nodes::OptimizerHints < Arel::Nodes::Unary
end
class Arel::Nodes::RollUp < Arel::Nodes::Unary
end
class Arel::Nodes::Grouping < Arel::Nodes::Unary
  def fetch_attribute(&block); end
end
class Arel::Nodes::HomogeneousIn < Arel::Nodes::Node
  def ==(other); end
  def attribute; end
  def casted_values; end
  def column_name; end
  def eql?(other); end
  def equality?; end
  def fetch_attribute(&block); end
  def hash; end
  def initialize(values, attribute, type); end
  def invert; end
  def ivars; end
  def left; end
  def proc_for_binds; end
  def right; end
  def table_name; end
  def type; end
  def values; end
end
class Arel::Nodes::Ordering < Arel::Nodes::Unary
  def nulls_first; end
  def nulls_last; end
end
class Arel::Nodes::NullsFirst < Arel::Nodes::Ordering
  def reverse; end
end
class Arel::Nodes::NullsLast < Arel::Nodes::Ordering
  def reverse; end
end
class Arel::Nodes::Ascending < Arel::Nodes::Ordering
  def ascending?; end
  def descending?; end
  def direction; end
  def reverse; end
end
class Arel::Nodes::Descending < Arel::Nodes::Ordering
  def ascending?; end
  def descending?; end
  def direction; end
  def reverse; end
end
class Arel::Nodes::UnqualifiedColumn < Arel::Nodes::Unary
  def attribute; end
  def attribute=(arg0); end
  def column; end
  def name; end
  def relation; end
end
class Arel::Nodes::With < Arel::Nodes::Unary
  def children; end
end
class Arel::Nodes::WithRecursive < Arel::Nodes::With
end
class Arel::Nodes::Binary < Arel::Nodes::NodeExpression
  def ==(other); end
  def eql?(other); end
  def hash; end
  def initialize(left, right); end
  def initialize_copy(other); end
  def left; end
  def left=(arg0); end
  def right; end
  def right=(arg0); end
end
module Arel::Nodes::FetchAttribute
  def fetch_attribute; end
end
class Arel::Nodes::Between < Arel::Nodes::Binary
  include Arel::Nodes::FetchAttribute
end
class Arel::Nodes::GreaterThan < Arel::Nodes::Binary
  def invert; end
  include Arel::Nodes::FetchAttribute
end
class Arel::Nodes::GreaterThanOrEqual < Arel::Nodes::Binary
  def invert; end
  include Arel::Nodes::FetchAttribute
end
class Arel::Nodes::LessThan < Arel::Nodes::Binary
  def invert; end
  include Arel::Nodes::FetchAttribute
end
class Arel::Nodes::LessThanOrEqual < Arel::Nodes::Binary
  def invert; end
  include Arel::Nodes::FetchAttribute
end
class Arel::Nodes::IsDistinctFrom < Arel::Nodes::Binary
  def invert; end
  include Arel::Nodes::FetchAttribute
end
class Arel::Nodes::IsNotDistinctFrom < Arel::Nodes::Binary
  def invert; end
  include Arel::Nodes::FetchAttribute
end
class Arel::Nodes::NotEqual < Arel::Nodes::Binary
  def invert; end
  include Arel::Nodes::FetchAttribute
end
class Arel::Nodes::NotIn < Arel::Nodes::Binary
  def invert; end
  include Arel::Nodes::FetchAttribute
end
class Arel::Nodes::Or < Arel::Nodes::Binary
  def fetch_attribute(&block); end
end
class Arel::Nodes::As < Arel::Nodes::Binary
end
class Arel::Nodes::Assignment < Arel::Nodes::Binary
end
class Arel::Nodes::Join < Arel::Nodes::Binary
end
class Arel::Nodes::Union < Arel::Nodes::Binary
end
class Arel::Nodes::UnionAll < Arel::Nodes::Binary
end
class Arel::Nodes::Intersect < Arel::Nodes::Binary
end
class Arel::Nodes::Except < Arel::Nodes::Binary
end
class Arel::Nodes::Equality < Arel::Nodes::Binary
  def equality?; end
  def invert; end
  include Arel::Nodes::FetchAttribute
end
class Arel::Nodes::Filter < Arel::Nodes::Binary
  include Arel::AliasPredication
  include Arel::WindowPredications
end
class Arel::Nodes::In < Arel::Nodes::Binary
  def equality?; end
  def invert; end
  include Arel::Nodes::FetchAttribute
end
class Arel::Nodes::JoinSource < Arel::Nodes::Binary
  def empty?; end
  def initialize(single_source, joinop = nil); end
end
class Arel::Nodes::DeleteStatement < Arel::Nodes::Node
  def ==(other); end
  def eql?(other); end
  def groups; end
  def groups=(arg0); end
  def hash; end
  def havings; end
  def havings=(arg0); end
  def initialize(relation = nil, wheres = nil); end
  def initialize_copy(other); end
  def key; end
  def key=(arg0); end
  def limit; end
  def limit=(arg0); end
  def offset; end
  def offset=(arg0); end
  def orders; end
  def orders=(arg0); end
  def relation; end
  def relation=(arg0); end
  def wheres; end
  def wheres=(arg0); end
end
class Arel::Nodes::TableAlias < Arel::Nodes::Binary
  def [](name); end
  def able_to_type_cast?; end
  def name; end
  def relation; end
  def table_alias; end
  def table_name; end
  def type_cast_for_database(attr_name, value); end
  def type_for_attribute(name); end
end
class Arel::Nodes::InfixOperation < Arel::Nodes::Binary
  def initialize(operator, left, right); end
  def operator; end
  include Arel::AliasPredication
  include Arel::Expressions
  include Arel::Math
  include Arel::OrderPredications
  include Arel::Predications
end
class Arel::Nodes::Multiplication < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::Division < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::Addition < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::Subtraction < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::Concat < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::Contains < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::Overlaps < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::BitwiseAnd < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::BitwiseOr < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::BitwiseXor < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::BitwiseShiftLeft < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::BitwiseShiftRight < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::UnaryOperation < Arel::Nodes::Unary
  def initialize(operator, operand); end
  def operator; end
end
class Arel::Nodes::BitwiseNot < Arel::Nodes::UnaryOperation
  def initialize(operand); end
end
class Arel::Nodes::Over < Arel::Nodes::Binary
  def initialize(left, right = nil); end
  def operator; end
  include Arel::AliasPredication
end
class Arel::Nodes::Matches < Arel::Nodes::Binary
  def case_sensitive; end
  def case_sensitive=(arg0); end
  def escape; end
  def initialize(left, right, escape = nil, case_sensitive = nil); end
end
class Arel::Nodes::DoesNotMatch < Arel::Nodes::Matches
end
class Arel::Nodes::Regexp < Arel::Nodes::Binary
  def case_sensitive; end
  def case_sensitive=(arg0); end
  def initialize(left, right, case_sensitive = nil); end
end
class Arel::Nodes::NotRegexp < Arel::Nodes::Regexp
end
class Arel::Nodes::And < Arel::Nodes::NodeExpression
  def ==(other); end
  def children; end
  def eql?(other); end
  def hash; end
  def initialize(children); end
  def left; end
  def right; end
end
class Arel::Nodes::Function < Arel::Nodes::NodeExpression
  def ==(other); end
  def alias; end
  def alias=(arg0); end
  def as(aliaz); end
  def distinct; end
  def distinct=(arg0); end
  def eql?(other); end
  def expressions; end
  def expressions=(arg0); end
  def hash; end
  def initialize(expr, aliaz = nil); end
  include Arel::FilterPredications
  include Arel::WindowPredications
end
class Arel::Nodes::Sum < Arel::Nodes::Function
end
class Arel::Nodes::Exists < Arel::Nodes::Function
end
class Arel::Nodes::Max < Arel::Nodes::Function
end
class Arel::Nodes::Min < Arel::Nodes::Function
end
class Arel::Nodes::Avg < Arel::Nodes::Function
end
class Arel::Nodes::Count < Arel::Nodes::Function
  def initialize(expr, distinct = nil, aliaz = nil); end
end
class Arel::Nodes::Extract < Arel::Nodes::Unary
  def ==(other); end
  def eql?(other); end
  def field; end
  def field=(arg0); end
  def hash; end
  def initialize(expr, field); end
end
class Arel::Nodes::ValuesList < Arel::Nodes::Unary
  def rows; end
end
class Arel::Nodes::NamedFunction < Arel::Nodes::Function
  def ==(other); end
  def eql?(other); end
  def hash; end
  def initialize(name, expr, aliaz = nil); end
  def name; end
  def name=(arg0); end
end
class Arel::Nodes::Window < Arel::Nodes::Node
  def ==(other); end
  def eql?(other); end
  def frame(expr); end
  def framing; end
  def framing=(arg0); end
  def hash; end
  def initialize; end
  def initialize_copy(other); end
  def order(*expr); end
  def orders; end
  def orders=(arg0); end
  def partition(*expr); end
  def partitions; end
  def partitions=(arg0); end
  def range(expr = nil); end
  def rows(expr = nil); end
end
class Arel::Nodes::NamedWindow < Arel::Nodes::Window
  def ==(other); end
  def eql?(other); end
  def hash; end
  def initialize(name); end
  def initialize_copy(other); end
  def name; end
  def name=(arg0); end
end
class Arel::Nodes::Rows < Arel::Nodes::Unary
  def initialize(expr = nil); end
end
class Arel::Nodes::Range < Arel::Nodes::Unary
  def initialize(expr = nil); end
end
class Arel::Nodes::CurrentRow < Arel::Nodes::Node
  def ==(other); end
  def eql?(other); end
  def hash; end
end
class Arel::Nodes::Preceding < Arel::Nodes::Unary
  def initialize(expr = nil); end
end
class Arel::Nodes::Following < Arel::Nodes::Unary
  def initialize(expr = nil); end
end
class Arel::Nodes::Case < Arel::Nodes::NodeExpression
  def ==(other); end
  def case; end
  def case=(arg0); end
  def conditions; end
  def conditions=(arg0); end
  def default; end
  def default=(arg0); end
  def else(expression); end
  def eql?(other); end
  def hash; end
  def initialize(expression = nil, default = nil); end
  def initialize_copy(other); end
  def then(expression); end
  def when(condition, expression = nil); end
end
class Arel::Nodes::When < Arel::Nodes::Binary
end
class Arel::Nodes::Else < Arel::Nodes::Unary
end
class Arel::Nodes::FullOuterJoin < Arel::Nodes::Join
end
class Arel::Nodes::InnerJoin < Arel::Nodes::Join
end
class Arel::Nodes::OuterJoin < Arel::Nodes::Join
end
class Arel::Nodes::RightOuterJoin < Arel::Nodes::Join
end
class Arel::Nodes::StringJoin < Arel::Nodes::Join
  def initialize(left, right = nil); end
end
class Arel::Nodes::Comment < Arel::Nodes::Node
  def ==(other); end
  def eql?(other); end
  def hash; end
  def initialize(values); end
  def initialize_copy(other); end
  def values; end
end
class Arel::Nodes::SqlLiteral < String
  def encode_with(coder); end
  def fetch_attribute; end
  include Arel::AliasPredication
  include Arel::Expressions
  include Arel::OrderPredications
  include Arel::Predications
end
class Arel::Nodes::Casted < Arel::Nodes::NodeExpression
  def ==(other); end
  def attribute; end
  def eql?(other); end
  def hash; end
  def initialize(value, attribute); end
  def nil?; end
  def value; end
  def value_before_type_cast; end
  def value_for_database; end
end
class Arel::Nodes::Quoted < Arel::Nodes::Unary
  def infinite?; end
  def nil?; end
  def value_before_type_cast; end
  def value_for_database; end
end
module ActiveRecord
  def self.action_on_strict_loading_violation; end
  def self.action_on_strict_loading_violation=(arg0); end
  def self.application_record_class; end
  def self.application_record_class=(arg0); end
  def self.async_query_executor; end
  def self.async_query_executor=(arg0); end
  def self.default_timezone; end
  def self.default_timezone=(default_timezone); end
  def self.dump_schema_after_migration; end
  def self.dump_schema_after_migration=(arg0); end
  def self.dump_schemas; end
  def self.dump_schemas=(arg0); end
  def self.eager_load!; end
  def self.error_on_ignored_order; end
  def self.error_on_ignored_order=(arg0); end
  def self.gem_version; end
  def self.global_executor_concurrency; end
  def self.global_executor_concurrency=(global_executor_concurrency); end
  def self.global_thread_pool_async_query_executor; end
  def self.index_nested_attribute_errors; end
  def self.index_nested_attribute_errors=(arg0); end
  def self.lazily_load_schema_cache; end
  def self.lazily_load_schema_cache=(arg0); end
  def self.legacy_connection_handling; end
  def self.legacy_connection_handling=(arg0); end
  def self.maintain_test_schema; end
  def self.maintain_test_schema=(arg0); end
  def self.query_transformers; end
  def self.query_transformers=(arg0); end
  def self.queues; end
  def self.queues=(arg0); end
  def self.reading_role; end
  def self.reading_role=(arg0); end
  def self.schema_cache_ignored_tables; end
  def self.schema_cache_ignored_tables=(arg0); end
  def self.schema_format; end
  def self.schema_format=(arg0); end
  def self.suppress_multiple_database_warning; end
  def self.suppress_multiple_database_warning=(arg0); end
  def self.timestamped_migrations; end
  def self.timestamped_migrations=(arg0); end
  def self.verbose_query_logs; end
  def self.verbose_query_logs=(arg0); end
  def self.verify_foreign_keys_for_fixtures; end
  def self.verify_foreign_keys_for_fixtures=(arg0); end
  def self.version; end
  def self.warn_on_records_fetched_greater_than; end
  def self.warn_on_records_fetched_greater_than=(arg0); end
  def self.writing_role; end
  def self.writing_role=(arg0); end
  extend ActiveSupport::Autoload
end
module ActiveRecord::VERSION
end
class ActiveRecord::ActiveRecordError < StandardError
end
class ActiveRecord::ActiveJobRequiredError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::SubclassNotFound < ActiveRecord::ActiveRecordError
end
class ActiveRecord::AssociationTypeMismatch < ActiveRecord::ActiveRecordError
end
class ActiveRecord::SerializationTypeMismatch < ActiveRecord::ActiveRecordError
end
class ActiveRecord::AdapterNotSpecified < ActiveRecord::ActiveRecordError
end
class ActiveRecord::TableNotSpecified < ActiveRecord::ActiveRecordError
end
class ActiveRecord::AdapterNotFound < ActiveRecord::ActiveRecordError
end
class ActiveRecord::ConnectionNotEstablished < ActiveRecord::ActiveRecordError
end
class ActiveRecord::ConnectionTimeoutError < ActiveRecord::ConnectionNotEstablished
end
class ActiveRecord::DatabaseConnectionError < ActiveRecord::ConnectionNotEstablished
  def initialize(message = nil); end
  def self.hostname_error(hostname); end
  def self.username_error(username); end
end
class ActiveRecord::ExclusiveConnectionTimeoutError < ActiveRecord::ConnectionTimeoutError
end
class ActiveRecord::ReadOnlyError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::RecordNotFound < ActiveRecord::ActiveRecordError
  def id; end
  def initialize(message = nil, model = nil, primary_key = nil, id = nil); end
  def model; end
  def primary_key; end
end
class ActiveRecord::RecordNotSaved < ActiveRecord::ActiveRecordError
  def initialize(message = nil, record = nil); end
  def record; end
end
class ActiveRecord::RecordNotDestroyed < ActiveRecord::ActiveRecordError
  def initialize(message = nil, record = nil); end
  def record; end
end
class ActiveRecord::SoleRecordExceeded < ActiveRecord::ActiveRecordError
  def initialize(record = nil); end
  def record; end
end
class ActiveRecord::StatementInvalid < ActiveRecord::ActiveRecordError
  def binds; end
  def initialize(message = nil, sql: nil, binds: nil); end
  def sql; end
end
class ActiveRecord::WrappedDatabaseException < ActiveRecord::StatementInvalid
end
class ActiveRecord::RecordNotUnique < ActiveRecord::WrappedDatabaseException
end
class ActiveRecord::InvalidForeignKey < ActiveRecord::WrappedDatabaseException
end
class ActiveRecord::MismatchedForeignKey < ActiveRecord::StatementInvalid
  def initialize(message: nil, sql: nil, binds: nil, table: nil, foreign_key: nil, target_table: nil, primary_key: nil, primary_key_column: nil); end
end
class ActiveRecord::NotNullViolation < ActiveRecord::StatementInvalid
end
class ActiveRecord::ValueTooLong < ActiveRecord::StatementInvalid
end
class ActiveRecord::RangeError < ActiveRecord::StatementInvalid
end
class ActiveRecord::PreparedStatementInvalid < ActiveRecord::ActiveRecordError
end
class ActiveRecord::NoDatabaseError < ActiveRecord::StatementInvalid
  def _actions; end
  def _actions=(arg0); end
  def _actions?; end
  def initialize(message = nil); end
  def self._actions; end
  def self._actions=(value); end
  def self._actions?; end
  def self.db_error(db_name); end
  extend ActiveSupport::ActionableError::ClassMethods
  include ActiveSupport::ActionableError
end
class ActiveRecord::DatabaseAlreadyExists < ActiveRecord::StatementInvalid
end
class ActiveRecord::PreparedStatementCacheExpired < ActiveRecord::StatementInvalid
end
class ActiveRecord::StaleObjectError < ActiveRecord::ActiveRecordError
  def attempted_action; end
  def initialize(record = nil, attempted_action = nil); end
  def record; end
end
class ActiveRecord::ConfigurationError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::ReadOnlyRecord < ActiveRecord::ActiveRecordError
end
class ActiveRecord::StrictLoadingViolationError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::Rollback < ActiveRecord::ActiveRecordError
end
class ActiveRecord::DangerousAttributeError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::AttributeAssignmentError < ActiveRecord::ActiveRecordError
  def attribute; end
  def exception; end
  def initialize(message = nil, exception = nil, attribute = nil); end
end
class ActiveRecord::MultiparameterAssignmentErrors < ActiveRecord::ActiveRecordError
  def errors; end
  def initialize(errors = nil); end
end
class ActiveRecord::UnknownPrimaryKey < ActiveRecord::ActiveRecordError
  def initialize(model = nil, description = nil); end
  def model; end
end
class ActiveRecord::ImmutableRelation < ActiveRecord::ActiveRecordError
end
class ActiveRecord::TransactionIsolationError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::TransactionRollbackError < ActiveRecord::StatementInvalid
end
class ActiveRecord::AsynchronousQueryInsideTransactionError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::SerializationFailure < ActiveRecord::TransactionRollbackError
end
class ActiveRecord::Deadlocked < ActiveRecord::TransactionRollbackError
end
class ActiveRecord::IrreversibleOrderError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::QueryAborted < ActiveRecord::StatementInvalid
end
class ActiveRecord::LockWaitTimeout < ActiveRecord::StatementInvalid
end
class ActiveRecord::StatementTimeout < ActiveRecord::QueryAborted
end
class ActiveRecord::QueryCanceled < ActiveRecord::QueryAborted
end
class ActiveRecord::AdapterTimeout < ActiveRecord::QueryAborted
end
class ActiveRecord::UnknownAttributeReference < ActiveRecord::ActiveRecordError
end
module ActiveRecord::AttributeMethods
  def [](attr_name); end
  def []=(attr_name, value); end
  def _has_attribute?(attr_name); end
  def accessed_fields; end
  def attribute_for_inspect(attr_name); end
  def attribute_method?(attr_name); end
  def attribute_names; end
  def attribute_present?(attr_name); end
  def attributes; end
  def attributes_for_create(attribute_names); end
  def attributes_for_update(attribute_names); end
  def attributes_with_values(attribute_names); end
  def format_for_inspect(name, value); end
  def has_attribute?(attr_name); end
  def pk_attribute?(name); end
  def respond_to?(name, include_private = nil); end
  def self.dangerous_attribute_methods; end
  extend ActiveSupport::Autoload
  extend ActiveSupport::Concern
  include ActiveModel::AttributeMethods
end
class ActiveRecord::AttributeMethods::GeneratedAttributeMethods < Module
  def lock; end
  def locked?; end
  def synchronize(&block); end
  def try_lock; end
  def unlock; end
  include Mutex_m
end
module ActiveRecord::AttributeMethods::ClassMethods
  def _has_attribute?(attr_name); end
  def attribute_method?(attribute); end
  def attribute_names; end
  def dangerous_attribute_method?(name); end
  def dangerous_class_method?(method_name); end
  def define_attribute_methods; end
  def has_attribute?(attr_name); end
  def inherited(child_class); end
  def initialize_generated_modules; end
  def instance_method_already_implemented?(method_name); end
  def method_defined_within?(name, klass, superklass = nil); end
  def undefine_attribute_methods; end
end
module ActiveRecord::Scoping
  def initialize_internals_callback; end
  def populate_with_current_scope_attributes; end
  extend ActiveSupport::Autoload
  extend ActiveSupport::Concern
end
module ActiveRecord::Scoping::ClassMethods
  def current_scope(skip_inherited_scope = nil); end
  def current_scope=(scope); end
  def global_current_scope(skip_inherited_scope = nil); end
  def global_current_scope=(scope); end
  def scope_attributes; end
  def scope_attributes?; end
  def scope_registry; end
end
class ActiveRecord::Scoping::ScopeRegistry
  def current_scope(model, skip_inherited_scope = nil); end
  def global_current_scope(model, skip_inherited_scope = nil); end
  def ignore_default_scope(model, skip_inherited_scope = nil); end
  def initialize; end
  def self.current_scope(**, ****, &&); end
  def self.global_current_scope(**, ****, &&); end
  def self.ignore_default_scope(**, ****, &&); end
  def self.instance; end
  def self.set_current_scope(**, ****, &&); end
  def self.set_global_current_scope(**, ****, &&); end
  def self.set_ignore_default_scope(**, ****, &&); end
  def set_current_scope(model, value); end
  def set_global_current_scope(model, value); end
  def set_ignore_default_scope(model, value); end
  def set_value_for(scope_type, model, value); end
  def value_for(scope_type, model, skip_inherited_scope = nil); end
end
module ActiveRecord::Coders
end
module ActiveRecord::Locking
  extend ActiveSupport::Autoload
end
module ActiveRecord::Middleware
  extend ActiveSupport::Autoload
end
module ActiveRecord::Tasks
  extend ActiveSupport::Autoload
end
class ActiveRecord::Railtie < Rails::Railtie
end
module ActiveRecord::Reflection
  def self.add_aggregate_reflection(ar, name, reflection); end
  def self.add_reflection(ar, name, reflection); end
  def self.create(macro, name, scope, options, ar); end
  def self.reflection_class_for(macro); end
  extend ActiveSupport::Concern
end
module ActiveRecord::Reflection::ClassMethods
  def _reflect_on_association(association); end
  def clear_reflections_cache; end
  def reflect_on_aggregation(aggregation); end
  def reflect_on_all_aggregations; end
  def reflect_on_all_associations(macro = nil); end
  def reflect_on_all_autosave_associations; end
  def reflect_on_association(association); end
  def reflections; end
end
class ActiveRecord::Reflection::AbstractReflection
  def actual_source_reflection; end
  def alias_candidate(name); end
  def build_association(attributes, &block); end
  def build_scope(table, predicate_builder = nil, klass = nil); end
  def chain; end
  def check_validity_of_inverse!; end
  def class_name; end
  def constraints; end
  def counter_cache_column; end
  def counter_must_be_updated_by_has_many?; end
  def ensure_option_not_given_as_class!(option_name); end
  def has_cached_counter?; end
  def inverse_of; end
  def inverse_updates_counter_cache?; end
  def inverse_updates_counter_in_memory?; end
  def inverse_which_updates_counter_cache; end
  def join_scope(table, foreign_table, foreign_klass); end
  def join_scopes(table, predicate_builder, klass = nil, record = nil); end
  def klass_join_scope(table, predicate_builder); end
  def predicate_builder(table); end
  def primary_key(klass); end
  def scopes; end
  def strict_loading?; end
  def table_name; end
  def through_reflection?; end
end
class ActiveRecord::Reflection::MacroReflection < ActiveRecord::Reflection::AbstractReflection
  def ==(other_aggregation); end
  def active_record; end
  def autosave=(autosave); end
  def compute_class(name); end
  def derive_class_name; end
  def initialize(name, scope, options, active_record); end
  def klass; end
  def name; end
  def options; end
  def plural_name; end
  def scope; end
  def scope_for(relation, owner = nil); end
end
class ActiveRecord::Reflection::AggregateReflection < ActiveRecord::Reflection::MacroReflection
  def mapping; end
end
class ActiveRecord::Reflection::AssociationReflection < ActiveRecord::Reflection::MacroReflection
  def active_record_primary_key; end
  def add_as_polymorphic_through(reflection, seed); end
  def add_as_source(seed); end
  def add_as_through(seed); end
  def association_class; end
  def association_foreign_key; end
  def association_primary_key(klass = nil); end
  def association_scope_cache(klass, owner, &block); end
  def automatic_inverse_of; end
  def belongs_to?; end
  def can_find_inverse_of_automatically?(reflection, inverse_reflection = nil); end
  def check_eager_loadable!; end
  def check_validity!; end
  def clear_association_scope_cache; end
  def collect_join_chain; end
  def collection?; end
  def compute_class(name); end
  def derive_class_name; end
  def derive_foreign_key; end
  def derive_join_table; end
  def extensions; end
  def foreign_key; end
  def foreign_type; end
  def has_inverse?; end
  def has_one?; end
  def has_scope?; end
  def initialize(name, scope, options, active_record); end
  def inverse_name; end
  def join_foreign_key; end
  def join_id_for(owner); end
  def join_primary_key(klass = nil); end
  def join_table; end
  def macro; end
  def nested?; end
  def parent_reflection; end
  def parent_reflection=(arg0); end
  def polymorphic?; end
  def polymorphic_inverse_of(associated_class); end
  def scope_allows_automatic_inverse_of?(reflection, inverse_reflection); end
  def source_reflection; end
  def through_reflection; end
  def type; end
  def valid_inverse_reflection?(reflection); end
  def validate?; end
end
class ActiveRecord::Reflection::HasManyReflection < ActiveRecord::Reflection::AssociationReflection
  def association_class; end
  def collection?; end
  def macro; end
end
class ActiveRecord::Reflection::HasOneReflection < ActiveRecord::Reflection::AssociationReflection
  def association_class; end
  def has_one?; end
  def macro; end
end
class ActiveRecord::Reflection::BelongsToReflection < ActiveRecord::Reflection::AssociationReflection
  def association_class; end
  def association_primary_key(klass = nil); end
  def belongs_to?; end
  def can_find_inverse_of_automatically?(*arg0); end
  def join_foreign_key; end
  def join_foreign_type; end
  def join_primary_key(klass = nil); end
  def macro; end
end
class ActiveRecord::Reflection::HasAndBelongsToManyReflection < ActiveRecord::Reflection::AssociationReflection
  def collection?; end
  def macro; end
end
class ActiveRecord::Reflection::ThroughReflection < ActiveRecord::Reflection::AbstractReflection
  def active_record(**, ****, &&); end
  def active_record_primary_key(**, ****, &&); end
  def actual_source_reflection; end
  def add_as_polymorphic_through(reflection, seed); end
  def add_as_source(seed); end
  def add_as_through(seed); end
  def association_class(**, ****, &&); end
  def association_foreign_key(**, ****, &&); end
  def association_primary_key(klass = nil); end
  def association_scope_cache(**, ****, &&); end
  def autosave=(arg); end
  def belongs_to?(**, ****, &&); end
  def check_eager_loadable!(**, ****, &&); end
  def check_validity!; end
  def clear_association_scope_cache; end
  def collect_join_chain; end
  def collect_join_reflections(seed); end
  def collection?(**, ****, &&); end
  def compute_class(**, ****, &&); end
  def constraints; end
  def delegate_reflection; end
  def derive_class_name; end
  def extensions(**, ****, &&); end
  def foreign_key(**, ****, &&); end
  def foreign_type(**, ****, &&); end
  def has_inverse?(**, ****, &&); end
  def has_one?(**, ****, &&); end
  def has_scope?; end
  def initialize(delegate_reflection); end
  def inverse_name; end
  def join_foreign_key(**, ****, &&); end
  def join_id_for(**, ****, &&); end
  def join_primary_key(klass = nil); end
  def join_scopes(table, predicate_builder, klass = nil, record = nil); end
  def join_table(**, ****, &&); end
  def klass; end
  def macro(**, ****, &&); end
  def name(**, ****, &&); end
  def nested?; end
  def options(**, ****, &&); end
  def parent_reflection(**, ****, &&); end
  def parent_reflection=(arg); end
  def plural_name(**, ****, &&); end
  def polymorphic?(**, ****, &&); end
  def polymorphic_inverse_of(**, ****, &&); end
  def scope(**, ****, &&); end
  def scope_for(**, ****, &&); end
  def scopes; end
  def source_options; end
  def source_reflection; end
  def source_reflection_name; end
  def source_reflection_names; end
  def through_options; end
  def through_reflection; end
  def through_reflection?; end
  def type(**, ****, &&); end
  def validate?(**, ****, &&); end
end
class ActiveRecord::Reflection::PolymorphicReflection < ActiveRecord::Reflection::AbstractReflection
  def constraints; end
  def initialize(reflection, previous_reflection); end
  def join_foreign_key(**, ****, &&); end
  def join_primary_key(**, ****, &&); end
  def join_scopes(table, predicate_builder, klass = nil, record = nil); end
  def klass(**, ****, &&); end
  def name(**, ****, &&); end
  def plural_name(**, ****, &&); end
  def scope(**, ****, &&); end
  def scope_for(**, ****, &&); end
  def source_type_scope; end
  def type(**, ****, &&); end
end
class ActiveRecord::Reflection::RuntimeReflection < ActiveRecord::Reflection::AbstractReflection
  def aliased_table; end
  def all_includes; end
  def constraints(**, ****, &&); end
  def initialize(reflection, association); end
  def join_foreign_key(**, ****, &&); end
  def join_primary_key(klass = nil); end
  def klass; end
  def scope(**, ****, &&); end
  def type(**, ****, &&); end
end
class ActiveRecord::LogSubscriber < ActiveSupport::LogSubscriber
end
class ActiveRecord::ExplainRegistry
end
class ActiveRecord::ExplainSubscriber
end
module ActiveRecord::Delegation
  extend ActiveSupport::Concern
end
module ActiveRecord::Delegation::DelegateCache
end
class ActiveRecord::Delegation::GeneratedRelationMethods < Module
  include Mutex_m
end
module ActiveRecord::Delegation::ClassSpecificRelation
  extend ActiveSupport::Concern
end
module ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
end
module ActiveRecord::Delegation::ClassMethods
end
module ActiveRecord::Attributes
  extend ActiveSupport::Concern
end
module ActiveRecord::Attributes::ClassMethods
end
module ActiveRecord::TypeCaster
end
class ActiveRecord::TypeCaster::Map
end
class ActiveRecord::TypeCaster::Connection
end
class ActiveRecord::DatabaseConfigurations
end
class ActiveRecord::DatabaseConfigurations::DatabaseConfig
end
class ActiveRecord::DatabaseConfigurations::HashConfig < ActiveRecord::DatabaseConfigurations::DatabaseConfig
end
class ActiveRecord::DatabaseConfigurations::UrlConfig < ActiveRecord::DatabaseConfigurations::HashConfig
end
class ActiveRecord::DatabaseConfigurations::ConnectionUrlResolver
end
class ActiveRecord::DatabaseConfigurations::InvalidConfigurationError < StandardError
end
module ActiveRecord::ConnectionHandling
end
class ActiveRecord::QueryCache
end
module ActiveRecord::QueryCache::ClassMethods
end
module ActiveRecord::Querying
end
module ActiveRecord::Translation
  include ActiveModel::Translation
end
module ActiveRecord::DynamicMatchers
end
class ActiveRecord::DynamicMatchers::Method
end
class ActiveRecord::DynamicMatchers::FindBy < ActiveRecord::DynamicMatchers::Method
end
class ActiveRecord::DynamicMatchers::FindByBang < ActiveRecord::DynamicMatchers::Method
end
module ActiveRecord::DelegatedType
end
module ActiveRecord::Explain
end
module ActiveRecord::Type
end
module ActiveRecord::Type::Internal
end
module ActiveRecord::Type::Internal::Timezone
end
class ActiveRecord::Type::Date < ActiveModel::Type::Date
  include ActiveRecord::Type::Internal::Timezone
end
class ActiveRecord::Type::DateTime < ActiveModel::Type::DateTime
  include ActiveRecord::Type::Internal::Timezone
end
class ActiveRecord::Type::DecimalWithoutScale < ActiveModel::Type::BigInteger
end
class ActiveRecord::Type::Json < ActiveModel::Type::Value
  include ActiveModel::Type::Helpers::Mutable
end
class ActiveRecord::Type::Time < ActiveModel::Type::Time
  include ActiveRecord::Type::Internal::Timezone
end
class ActiveRecord::Type::Time::Value < Anonymous_Delegator_18
end
class ActiveRecord::Type::Text < ActiveModel::Type::String
end
class ActiveRecord::Type::UnsignedInteger < ActiveModel::Type::Integer
end
class ActiveRecord::Type::Serialized < Anonymous_Delegator_19
  include ActiveModel::Type::Helpers::Mutable
end
class ActiveRecord::Type::AdapterSpecificRegistry
end
class ActiveRecord::Type::Registration
end
class ActiveRecord::Type::DecorationRegistration < ActiveRecord::Type::Registration
end
class ActiveRecord::TypeConflictError < StandardError
end
class ActiveRecord::Type::TypeMap
end
class ActiveRecord::Type::HashLookupTypeMap
end
module ActiveRecord::Enum
end
class ActiveRecord::Enum::EnumType < ActiveModel::Type::Value
end
class ActiveRecord::Enum::EnumMethods < Module
end
module ActiveRecord::Aggregations
end
module ActiveRecord::Aggregations::ClassMethods
end
module ActiveRecord::Core
  extend ActiveSupport::Concern
end
module ActiveRecord::Core::ClassMethods
end
class ActiveRecord::Core::InspectionMask < Anonymous_Delegator_20
end
module ActiveRecord::ConnectionAdapters
  extend ActiveSupport::Autoload
end
class ActiveRecord::ConnectionAdapters::ConnectionHandler
end
class ActiveRecord::ConnectionAdapters::ConnectionHandler::StringConnectionOwner
end
class ActiveRecord::InsertAll
end
class ActiveRecord::InsertAll::Builder
end
module ActiveRecord::Persistence
  extend ActiveSupport::Concern
end
module ActiveRecord::Persistence::ClassMethods
end
module ActiveRecord::ReadonlyAttributes
  extend ActiveSupport::Concern
end
module ActiveRecord::ReadonlyAttributes::ClassMethods
end
module ActiveRecord::ModelSchema
  extend ActiveSupport::Concern
end
module ActiveRecord::ModelSchema::ClassMethods
end
module ActiveRecord::Inheritance
  extend ActiveSupport::Concern
end
module ActiveRecord::Inheritance::ClassMethods
end
class ActiveRecord::Scoping::DefaultScope
end
module ActiveRecord::Scoping::Default
  extend ActiveSupport::Concern
end
module ActiveRecord::Scoping::Default::ClassMethods
end
module ActiveRecord::Scoping::Named
  extend ActiveSupport::Concern
end
module ActiveRecord::Scoping::Named::ClassMethods
end
module ActiveRecord::Sanitization
  extend ActiveSupport::Concern
end
module ActiveRecord::Sanitization::ClassMethods
end
module ActiveRecord::AttributeAssignment
  include ActiveModel::AttributeAssignment
end
module ActiveRecord::Integration
  extend ActiveSupport::Concern
end
module ActiveRecord::Integration::ClassMethods
end
module ActiveRecord::Validations
  extend ActiveSupport::Concern
  include ActiveModel::Validations
end
class ActiveRecord::Validations::AssociatedValidator < ActiveModel::EachValidator
end
module ActiveRecord::Validations::ClassMethods
end
class ActiveRecord::Validations::UniquenessValidator < ActiveModel::EachValidator
end
class ActiveRecord::Validations::PresenceValidator < ActiveModel::Validations::PresenceValidator
end
class ActiveRecord::Validations::AbsenceValidator < ActiveModel::Validations::AbsenceValidator
end
class ActiveRecord::Validations::LengthValidator < ActiveModel::Validations::LengthValidator
end
class ActiveRecord::Validations::NumericalityValidator < ActiveModel::Validations::NumericalityValidator
end
class ActiveRecord::RecordInvalid < ActiveRecord::ActiveRecordError
end
module ActiveRecord::CounterCache
  extend ActiveSupport::Concern
end
module ActiveRecord::CounterCache::ClassMethods
end
module ActiveRecord::Locking::Optimistic
  extend ActiveSupport::Concern
end
module ActiveRecord::Locking::Optimistic::ClassMethods
end
class ActiveRecord::Locking::LockingType < Anonymous_Delegator_21
end
module ActiveRecord::Locking::Pessimistic
end
module ActiveRecord::AttributeMethods::Read
  extend ActiveSupport::Concern
end
module ActiveRecord::AttributeMethods::Read::ClassMethods
end
module ActiveRecord::AttributeMethods::Write
  extend ActiveSupport::Concern
end
module ActiveRecord::AttributeMethods::Write::ClassMethods
end
module ActiveRecord::AttributeMethods::BeforeTypeCast
  extend ActiveSupport::Concern
end
module ActiveRecord::AttributeMethods::Query
  extend ActiveSupport::Concern
end
module ActiveRecord::AttributeMethods::PrimaryKey
  extend ActiveSupport::Concern
end
module ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods
end
module ActiveRecord::AttributeMethods::TimeZoneConversion
  extend ActiveSupport::Concern
end
class ActiveRecord::AttributeMethods::TimeZoneConversion::TimeZoneConverter < Anonymous_Delegator_22
end
module ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods
end
module ActiveRecord::AttributeMethods::Dirty
  extend ActiveSupport::Concern
  include ActiveModel::Dirty
end
module ActiveRecord::AttributeMethods::Dirty::ClassMethods
end
module ActiveRecord::Timestamp
  extend ActiveSupport::Concern
end
module ActiveRecord::Timestamp::ClassMethods
end
module ActiveRecord::AttributeMethods::Serialization
  extend ActiveSupport::Concern
end
class ActiveRecord::AttributeMethods::Serialization::ColumnNotSerializableError < StandardError
end
module ActiveRecord::AttributeMethods::Serialization::ClassMethods
end
module ActiveRecord::Callbacks
  extend ActiveSupport::Concern
end
module ActiveRecord::Callbacks::ClassMethods
  include ActiveModel::Callbacks
end
class ActiveRecord::AssociationNotFoundError < ActiveRecord::ConfigurationError
  include DidYouMean::Correctable
end
class ActiveRecord::InverseOfAssociationNotFoundError < ActiveRecord::ActiveRecordError
  include DidYouMean::Correctable
end
class ActiveRecord::InverseOfAssociationRecursiveError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::HasManyThroughAssociationNotFoundError < ActiveRecord::ActiveRecordError
  include DidYouMean::Correctable
end
class ActiveRecord::HasManyThroughAssociationPolymorphicSourceError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::HasManyThroughAssociationPolymorphicThroughError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::HasManyThroughAssociationPointlessSourceTypeError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::HasOneThroughCantAssociateThroughCollection < ActiveRecord::ActiveRecordError
end
class ActiveRecord::HasOneAssociationPolymorphicThroughError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::HasManyThroughSourceAssociationNotFoundError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::HasManyThroughOrderError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::ThroughCantAssociateThroughHasOneOrManyReflection < ActiveRecord::ActiveRecordError
end
class ActiveRecord::AmbiguousSourceReflectionForThroughAssociation < ActiveRecord::ActiveRecordError
end
class ActiveRecord::HasManyThroughCantAssociateThroughHasOneOrManyReflection < ActiveRecord::ThroughCantAssociateThroughHasOneOrManyReflection
end
class ActiveRecord::HasOneThroughCantAssociateThroughHasOneOrManyReflection < ActiveRecord::ThroughCantAssociateThroughHasOneOrManyReflection
end
class ActiveRecord::ThroughNestedAssociationsAreReadonly < ActiveRecord::ActiveRecordError
end
class ActiveRecord::HasManyThroughNestedAssociationsAreReadonly < ActiveRecord::ThroughNestedAssociationsAreReadonly
end
class ActiveRecord::HasOneThroughNestedAssociationsAreReadonly < ActiveRecord::ThroughNestedAssociationsAreReadonly
end
class ActiveRecord::EagerLoadPolymorphicError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::DeleteRestrictionError < ActiveRecord::ActiveRecordError
end
module ActiveRecord::Associations
  extend ActiveSupport::Autoload
  extend ActiveSupport::Concern
end
module ActiveRecord::Associations::Builder
end
module ActiveRecord::Associations::ClassMethods
end
module ActiveRecord::AutosaveAssociation
  extend ActiveSupport::Concern
end
module ActiveRecord::AutosaveAssociation::AssociationBuilderExtension
end
module ActiveRecord::AutosaveAssociation::ClassMethods
end
class ActiveRecord::Associations::Builder::Association
end
module ActiveRecord::NestedAttributes
  extend ActiveSupport::Concern
end
class ActiveRecord::NestedAttributes::TooManyRecords < ActiveRecord::ActiveRecordError
end
module ActiveRecord::NestedAttributes::ClassMethods
end
module ActiveRecord::Transactions
  extend ActiveSupport::Concern
end
module ActiveRecord::Transactions::ClassMethods
end
module ActiveRecord::TouchLater
end
module ActiveRecord::NoTouching
  extend ActiveSupport::Concern
end
module ActiveRecord::NoTouching::ClassMethods
end
module ActiveRecord::Serialization
  extend ActiveSupport::Concern
  include ActiveModel::Serializers::JSON
end
module ActiveRecord::Store
  extend ActiveSupport::Concern
end
module ActiveRecord::Store::ClassMethods
end
class ActiveRecord::Store::HashAccessor
end
class ActiveRecord::Store::StringKeyedHashAccessor < ActiveRecord::Store::HashAccessor
end
class ActiveRecord::Store::IndifferentHashAccessor < ActiveRecord::Store::HashAccessor
end
class ActiveRecord::Store::IndifferentCoder
end
module ActiveRecord::SecureToken
  extend ActiveSupport::Concern
end
class ActiveRecord::SecureToken::MinimumLengthError < StandardError
end
module ActiveRecord::SecureToken::ClassMethods
end
module ActiveRecord::SignedId
  extend ActiveSupport::Concern
end
module ActiveRecord::SignedId::ClassMethods
end
module ActiveRecord::Suppressor
  extend ActiveSupport::Concern
end
module ActiveRecord::Suppressor::ClassMethods
end
module ActiveRecord::Encryption
  extend ActiveRecord::Encryption::Configurable::ClassMethods
  extend ActiveRecord::Encryption::Contexts::ClassMethods
  extend ActiveSupport::Autoload
  include ActiveRecord::Encryption::Configurable
  include ActiveRecord::Encryption::Contexts
end
class ActiveRecord::Encryption::Cipher
  extend ActiveSupport::Autoload
end
class ActiveRecord::Encryption::Context
end
module ActiveRecord::Encryption::Configurable
  extend ActiveSupport::Concern
end
module ActiveRecord::Encryption::Configurable::ClassMethods
end
class ActiveRecord::Encryption::Config
end
module ActiveRecord::Encryption::Contexts
  extend ActiveSupport::Concern
end
module ActiveRecord::Encryption::Contexts::ClassMethods
end
class ActiveRecord::Encryption::KeyGenerator
end
module ActiveRecord::Encryption::Errors
end
class ActiveRecord::Encryption::Errors::Base < StandardError
end
class ActiveRecord::Encryption::Errors::Encoding < ActiveRecord::Encryption::Errors::Base
end
class ActiveRecord::Encryption::Errors::Decryption < ActiveRecord::Encryption::Errors::Base
end
class ActiveRecord::Encryption::Errors::Encryption < ActiveRecord::Encryption::Errors::Base
end
class ActiveRecord::Encryption::Errors::Configuration < ActiveRecord::Encryption::Errors::Base
end
class ActiveRecord::Encryption::Errors::ForbiddenClass < ActiveRecord::Encryption::Errors::Base
end
class ActiveRecord::Encryption::Errors::EncryptedContentIntegrity < ActiveRecord::Encryption::Errors::Base
end
class ActiveRecord::Encryption::Encryptor
end
class ActiveRecord::Encryption::MessageSerializer
end
module ActiveRecord::Encryption::EncryptableRecord
  extend ActiveSupport::Concern
end
module ActiveRecord::Encryption::EncryptableRecord::ClassMethods
end
class ActiveRecord::Base
  extend ActiveModel::AttributeMethods::ClassMethods
  extend ActiveModel::Callbacks
  extend ActiveModel::Conversion::ClassMethods
  extend ActiveModel::Naming
  extend ActiveModel::Naming
  extend ActiveModel::Naming
  extend ActiveModel::SecurePassword::ClassMethods
  extend ActiveModel::Translation
  extend ActiveModel::Validations::Callbacks::ClassMethods
  extend ActiveModel::Validations::ClassMethods
  extend ActiveModel::Validations::HelperMethods
  extend ActiveRecord::Aggregations::ClassMethods
  extend ActiveRecord::Associations::ClassMethods
  extend ActiveRecord::AttributeMethods::ClassMethods
  extend ActiveRecord::AttributeMethods::Dirty::ClassMethods
  extend ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods
  extend ActiveRecord::AttributeMethods::Read::ClassMethods
  extend ActiveRecord::AttributeMethods::Serialization::ClassMethods
  extend ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods
  extend ActiveRecord::AttributeMethods::Write::ClassMethods
  extend ActiveRecord::Attributes::ClassMethods
  extend ActiveRecord::AutosaveAssociation::ClassMethods
  extend ActiveRecord::Callbacks::ClassMethods
  extend ActiveRecord::ConnectionHandling
  extend ActiveRecord::Core::ClassMethods
  extend ActiveRecord::CounterCache::ClassMethods
  extend ActiveRecord::DelegatedType
  extend ActiveRecord::Delegation::DelegateCache
  extend ActiveRecord::DynamicMatchers
  extend ActiveRecord::Encryption::EncryptableRecord::ClassMethods
  extend ActiveRecord::Enum
  extend ActiveRecord::Explain
  extend ActiveRecord::Inheritance::ClassMethods
  extend ActiveRecord::Integration::ClassMethods
  extend ActiveRecord::Locking::Optimistic::ClassMethods
  extend ActiveRecord::ModelSchema::ClassMethods
  extend ActiveRecord::NestedAttributes::ClassMethods
  extend ActiveRecord::NoTouching::ClassMethods
  extend ActiveRecord::Persistence::ClassMethods
  extend ActiveRecord::QueryCache::ClassMethods
  extend ActiveRecord::Querying
  extend ActiveRecord::ReadonlyAttributes::ClassMethods
  extend ActiveRecord::Reflection::ClassMethods
  extend ActiveRecord::Sanitization::ClassMethods
  extend ActiveRecord::Scoping::ClassMethods
  extend ActiveRecord::Scoping::Default::ClassMethods
  extend ActiveRecord::Scoping::Named::ClassMethods
  extend ActiveRecord::SecureToken::ClassMethods
  extend ActiveRecord::SignedId::ClassMethods
  extend ActiveRecord::Store::ClassMethods
  extend ActiveRecord::Suppressor::ClassMethods
  extend ActiveRecord::Timestamp::ClassMethods
  extend ActiveRecord::Transactions::ClassMethods
  extend ActiveRecord::Translation
  extend ActiveRecord::Validations::ClassMethods
  extend ActiveSupport::Benchmarkable
  extend ActiveSupport::Callbacks::ClassMethods
  extend ActiveSupport::DescendantsTracker
  extend ActiveSupport::DescendantsTracker
  include ActiveModel::AttributeMethods
  include ActiveModel::AttributeMethods
  include ActiveModel::Conversion
  include ActiveModel::Dirty
  include ActiveModel::SecurePassword
  include ActiveModel::Serializers::JSON
  include ActiveModel::Validations
  include ActiveModel::Validations::Callbacks
  include ActiveModel::Validations::HelperMethods
  include ActiveRecord::Associations
  include ActiveRecord::AttributeAssignment
  include ActiveRecord::AttributeMethods
  include ActiveRecord::AttributeMethods::BeforeTypeCast
  include ActiveRecord::AttributeMethods::Dirty
  include ActiveRecord::AttributeMethods::PrimaryKey
  include ActiveRecord::AttributeMethods::Query
  include ActiveRecord::AttributeMethods::Read
  include ActiveRecord::AttributeMethods::Serialization
  include ActiveRecord::AttributeMethods::TimeZoneConversion
  include ActiveRecord::AttributeMethods::Write
  include ActiveRecord::Attributes
  include ActiveRecord::AutosaveAssociation
  include ActiveRecord::Base::GeneratedAssociationMethods
  include ActiveRecord::Base::GeneratedAttributeMethods
  include ActiveRecord::Callbacks
  include ActiveRecord::Core
  include ActiveRecord::CounterCache
  include ActiveRecord::Encryption::EncryptableRecord
  include ActiveRecord::Inheritance
  include ActiveRecord::Integration
  include ActiveRecord::Locking::Optimistic
  include ActiveRecord::Locking::Pessimistic
  include ActiveRecord::ModelSchema
  include ActiveRecord::NestedAttributes
  include ActiveRecord::NoTouching
  include ActiveRecord::Persistence
  include ActiveRecord::ReadonlyAttributes
  include ActiveRecord::Reflection
  include ActiveRecord::Sanitization
  include ActiveRecord::Scoping
  include ActiveRecord::Scoping::Default
  include ActiveRecord::Scoping::Named
  include ActiveRecord::SecureToken
  include ActiveRecord::Serialization
  include ActiveRecord::SignedId
  include ActiveRecord::Store
  include ActiveRecord::Suppressor
  include ActiveRecord::Timestamp
  include ActiveRecord::TouchLater
  include ActiveRecord::Transactions
  include ActiveRecord::Validations
  include ActiveSupport::Callbacks
  include ActiveSupport::Callbacks
end
module ActiveRecord::Base::GeneratedAttributeMethods
end
module ActiveRecord::Base::GeneratedAssociationMethods
end
class ActiveRecord::DestroyAssociationAsyncError < StandardError
end
class ActiveRecord::DestroyAssociationAsyncJob < ActiveJob::Base
end
class ActiveRecord::MigrationError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::IrreversibleMigration < ActiveRecord::MigrationError
end
class ActiveRecord::DuplicateMigrationVersionError < ActiveRecord::MigrationError
end
class ActiveRecord::DuplicateMigrationNameError < ActiveRecord::MigrationError
end
class ActiveRecord::UnknownMigrationVersionError < ActiveRecord::MigrationError
end
class ActiveRecord::IllegalMigrationNameError < ActiveRecord::MigrationError
end
class ActiveRecord::PendingMigrationError < ActiveRecord::MigrationError
  extend ActiveSupport::ActionableError::ClassMethods
  include ActiveSupport::ActionableError
end
class ActiveRecord::ConcurrentMigrationError < ActiveRecord::MigrationError
end
class ActiveRecord::NoEnvironmentInSchemaError < ActiveRecord::MigrationError
end
class ActiveRecord::ProtectedEnvironmentError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::EnvironmentMismatchError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::EnvironmentStorageError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::Migration
end
class ActiveRecord::Migration::Current < ActiveRecord::Migration
end
class ActiveRecord::Migration::CheckPending
end
class ActiveRecord::MigrationContext
end
class ActiveRecord::Migrator
end
module ActiveRecord::ConnectionAdapters::Deduplicable
  extend ActiveSupport::Concern
end
module ActiveRecord::ConnectionAdapters::Deduplicable::ClassMethods
end
class ActiveRecord::ConnectionAdapters::SqlTypeMetadata
  extend ActiveRecord::ConnectionAdapters::Deduplicable::ClassMethods
  include ActiveRecord::ConnectionAdapters::Deduplicable
end
class ActiveRecord::SchemaDumper
end
class ActiveRecord::ConnectionAdapters::SchemaDumper < ActiveRecord::SchemaDumper
end
class ActiveRecord::ConnectionAdapters::SchemaCreation
end
class Arel::Collectors::Bind
end
class Arel::Collectors::Composite
end
class Arel::Collectors::SubstituteBinds
end
module ActiveRecord::ConnectionAdapters::Quoting
end
module ActiveRecord::ConnectionAdapters::DatabaseStatements
end
module ActiveRecord::Migration::JoinTable
end
module ActiveRecord::ConnectionAdapters::SchemaStatements
  include ActiveRecord::Migration::JoinTable
end
module ActiveRecord::ConnectionAdapters::DatabaseLimits
end
module ActiveRecord::ConnectionAdapters::QueryCache
end
module ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration
end
module ActiveRecord::ConnectionAdapters::Savepoints
end
class ActiveRecord::ConnectionAdapters::AbstractAdapter
  extend ActiveSupport::Callbacks::ClassMethods
  extend ActiveSupport::DescendantsTracker
  include ActiveRecord::ConnectionAdapters::DatabaseLimits
  include ActiveRecord::ConnectionAdapters::QueryCache
  include ActiveRecord::ConnectionAdapters::Quoting
  include ActiveRecord::ConnectionAdapters::Savepoints
  include ActiveSupport::Callbacks
end
class ActiveRecord::ConnectionAdapters::AbstractAdapter::Version
  include Comparable
end
class ActiveRecord::ConnectionAdapters::StatementPool
  include Enumerable
end
class ActiveRecord::ConnectionAdapters::Column
  extend ActiveRecord::ConnectionAdapters::Deduplicable::ClassMethods
  include ActiveRecord::ConnectionAdapters::Deduplicable
end
class ActiveRecord::ConnectionAdapters::NullColumn < ActiveRecord::ConnectionAdapters::Column
end
module ActiveRecord::ConnectionAdapters::PostgreSQL
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::Column < ActiveRecord::ConnectionAdapters::Column
end
module ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::ExplainPrettyPrinter
end
module ActiveRecord::ConnectionAdapters::PostgreSQL::OID
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Array < ActiveModel::Type::Value
  include ActiveModel::Type::Helpers::Mutable
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit < ActiveModel::Type::Value
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::BitVarying < ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bytea < ActiveModel::Type::Binary
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Cidr < ActiveModel::Type::Value
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Date < ActiveRecord::Type::Date
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::DateTime < ActiveRecord::Type::DateTime
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Decimal < ActiveModel::Type::Decimal
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Enum < ActiveModel::Type::Value
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Hstore < ActiveModel::Type::Value
  include ActiveModel::Type::Helpers::Mutable
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Inet < ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Cidr
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Interval < ActiveModel::Type::Value
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Jsonb < ActiveRecord::Type::Json
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Macaddr < ActiveModel::Type::String
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Money < ActiveModel::Type::Decimal
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Oid < ActiveRecord::Type::UnsignedInteger
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Point < ActiveModel::Type::Value
  include ActiveModel::Type::Helpers::Mutable
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::LegacyPoint < ActiveModel::Type::Value
  include ActiveModel::Type::Helpers::Mutable
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Range < ActiveModel::Type::Value
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::SpecializedString < ActiveModel::Type::String
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Timestamp < ActiveRecord::ConnectionAdapters::PostgreSQL::OID::DateTime
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::TimestampWithTimeZone < ActiveRecord::ConnectionAdapters::PostgreSQL::OID::DateTime
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Uuid < ActiveModel::Type::Value
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Vector < ActiveModel::Type::Value
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Xml < ActiveModel::Type::String
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Xml::Data
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::TypeMapInitializer
end
module ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting
end
module ActiveRecord::ConnectionAdapters::PostgreSQL::ReferentialIntegrity
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaCreation < ActiveRecord::ConnectionAdapters::SchemaCreation
end
class ActiveRecord::ConnectionAdapters::IndexDefinition
end
class ActiveRecord::ConnectionAdapters::ReferenceDefinition
end
module ActiveRecord::ConnectionAdapters::ColumnMethods
  extend ActiveSupport::Concern
end
module ActiveRecord::ConnectionAdapters::ColumnMethods::ClassMethods
end
class ActiveRecord::ConnectionAdapters::TableDefinition
  extend ActiveRecord::ConnectionAdapters::ColumnMethods::ClassMethods
  include ActiveRecord::ConnectionAdapters::ColumnMethods
end
class ActiveRecord::ConnectionAdapters::AlterTable
end
class ActiveRecord::ConnectionAdapters::Table
  extend ActiveRecord::ConnectionAdapters::ColumnMethods::ClassMethods
  include ActiveRecord::ConnectionAdapters::ColumnMethods
end
module ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods
  extend ActiveSupport::Concern
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::TableDefinition < ActiveRecord::ConnectionAdapters::TableDefinition
  include ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::Table < ActiveRecord::ConnectionAdapters::Table
  include ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::AlterTable < ActiveRecord::ConnectionAdapters::AlterTable
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaDumper < ActiveRecord::ConnectionAdapters::SchemaDumper
end
module ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::TypeMetadata < Anonymous_Delegator_23
  extend ActiveRecord::ConnectionAdapters::Deduplicable::ClassMethods
  include ActiveRecord::ConnectionAdapters::Deduplicable
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::Name
end
module ActiveRecord::ConnectionAdapters::PostgreSQL::Utils
  extend ActiveRecord::ConnectionAdapters::PostgreSQL::Utils
end
class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter < ActiveRecord::ConnectionAdapters::AbstractAdapter
  include ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements
  include ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting
  include ActiveRecord::ConnectionAdapters::PostgreSQL::ReferentialIntegrity
  include ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements
end
class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool < ActiveRecord::ConnectionAdapters::StatementPool
end
class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::MoneyDecoder < PG::SimpleDecoder
end
class ActiveRecord::ConnectionAdapters::PoolConfig
  include Mutex_m
end
class ActiveRecord::ConnectionAdapters::PoolManager
end
class ActiveRecord::ConnectionAdapters::ConnectionPool
  include ActiveRecord::ConnectionAdapters::AbstractPool
  include ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration
  include MonitorMixin
end
class ActiveRecord::ConnectionAdapters::ConnectionPool::Queue
end
module ActiveRecord::ConnectionAdapters::ConnectionPool::BiasableQueue
end
class ActiveRecord::ConnectionAdapters::ConnectionPool::BiasableQueue::BiasedConditionVariable
end
class ActiveRecord::ConnectionAdapters::ConnectionPool::ConnectionLeasingQueue < ActiveRecord::ConnectionAdapters::ConnectionPool::Queue
  include ActiveRecord::ConnectionAdapters::ConnectionPool::BiasableQueue
end
class ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper
end
module ActiveRecord::ConnectionAdapters::AbstractPool
end
class ActiveRecord::ConnectionAdapters::NullPool
  include ActiveRecord::ConnectionAdapters::AbstractPool
end
module ActiveRecord::Railties
end
module ActiveRecord::Railties::ControllerRuntime
  extend ActiveSupport::Concern
end
module ActiveRecord::Railties::ControllerRuntime::ClassMethods
end
class ActiveRecord::AsynchronousQueriesTracker
end
module ActiveRecord::AsynchronousQueriesTracker::NullSession
end
class ActiveRecord::AsynchronousQueriesTracker::Session
end
class ActiveRecord::Encryption::KeyProvider
end
class ActiveRecord::Encryption::DerivedSecretKeyProvider < ActiveRecord::Encryption::KeyProvider
end
module ActiveRecord::FinderMethods
end
module ActiveRecord::Calculations
end
class ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassMethods
  include ActiveRecord::FinderMethods
  include Enumerable
end
class ActiveRecord::Relation::HashMerger
end
class ActiveRecord::Relation::Merger
end
module ActiveRecord::SpawnMethods
end
class ActiveRecord::Relation::FromClause
end
class ActiveRecord::Relation::QueryAttribute < ActiveModel::Attribute
end
class ActiveRecord::Relation::WhereClause
end
module ActiveRecord::QueryMethods
  include ActiveModel::ForbiddenAttributesProtection
end
class ActiveRecord::QueryMethods::WhereChain
end
class Arel::Nodes::LeadingJoin < Arel::Nodes::InnerJoin
end
module ActiveRecord::Batches
end
class ActiveRecord::Batches::BatchEnumerator
  include Enumerable
end
class ActiveRecord::Relation::StrictLoadingScope
end
class ActiveRecord::Tasks::DatabaseNotSupported < StandardError
end
module ActiveRecord::Tasks::DatabaseTasks
  extend ActiveRecord::Tasks::DatabaseTasks
end
class ActiveRecord::ConnectionAdapters::SchemaCache
end
class ActiveRecord::Associations::CollectionProxy < ActiveRecord::Relation
end
class ActiveRecord::AssociationRelation < ActiveRecord::Relation
end
class ActiveRecord::DisableJoinsAssociationRelation < ActiveRecord::Relation
end
class ActiveRecord::Associations::Builder::SingularAssociation < ActiveRecord::Associations::Builder::Association
end
class ActiveRecord::Associations::Builder::BelongsTo < ActiveRecord::Associations::Builder::SingularAssociation
end
class ActiveRecord::Associations::Builder::CollectionAssociation < ActiveRecord::Associations::Builder::Association
end
class ActiveRecord::Associations::Builder::HasMany < ActiveRecord::Associations::Builder::CollectionAssociation
end
class ActiveRecord::Associations::Builder::HasOne < ActiveRecord::Associations::Builder::SingularAssociation
end
class ActiveRecord::ConnectionAdapters::TransactionState
end
class ActiveRecord::ConnectionAdapters::NullTransaction
end
class ActiveRecord::ConnectionAdapters::Transaction
end
class ActiveRecord::ConnectionAdapters::SavepointTransaction < ActiveRecord::ConnectionAdapters::Transaction
end
class ActiveRecord::ConnectionAdapters::RealTransaction < ActiveRecord::ConnectionAdapters::Transaction
end
class ActiveRecord::ConnectionAdapters::TransactionManager
end
module ActiveRecord::RuntimeRegistry
  extend ActiveRecord::RuntimeRegistry
end
class ActiveRecord::Coders::JSON
end
class ActiveRecord::Encryption::Scheme
end
class ActiveRecord::Schema < ActiveRecord::Migration::Current
  extend ActiveRecord::Schema::Definition::ClassMethods
  include ActiveRecord::Schema::Definition
end
module ActiveRecord::Schema::Definition
  extend ActiveSupport::Concern
end
module ActiveRecord::Schema::Definition::ClassMethods
end
module ActiveRecord::Migration::Compatibility
end
class ActiveRecord::Migration::Compatibility::V6_1 < ActiveRecord::Migration::Current
end
class ActiveRecord::Migration::Compatibility::V6_1::PostgreSQLCompat
end
module ActiveRecord::Migration::Compatibility::V6_1::TableDefinition
end
class ActiveRecord::Migration::Compatibility::V6_0 < ActiveRecord::Migration::Compatibility::V6_1
end
class ActiveRecord::Migration::Compatibility::V6_0::ReferenceDefinition < ActiveRecord::ConnectionAdapters::ReferenceDefinition
end
module ActiveRecord::Migration::Compatibility::V6_0::SQLite3
end
module ActiveRecord::Migration::Compatibility::V6_0::SQLite3::TableDefinition
end
module ActiveRecord::Migration::Compatibility::V6_0::TableDefinition
end
class ActiveRecord::Migration::Compatibility::V5_2 < ActiveRecord::Migration::Compatibility::V6_0
end
module ActiveRecord::Migration::Compatibility::V5_2::TableDefinition
end
module ActiveRecord::Migration::Compatibility::V5_2::CommandRecorder
end
class ActiveRecord::Migration::Compatibility::V5_1 < ActiveRecord::Migration::Compatibility::V5_2
end
class ActiveRecord::Migration::Compatibility::V5_0 < ActiveRecord::Migration::Compatibility::V5_1
end
module ActiveRecord::Migration::Compatibility::V5_0::TableDefinition
end
class ActiveRecord::Migration::Compatibility::V4_2 < ActiveRecord::Migration::Compatibility::V5_0
end
module ActiveRecord::Migration::Compatibility::V4_2::TableDefinition
end
module ActiveRecord::SchemaMigration::GeneratedAttributeMethods
end
class ActiveRecord::SchemaMigration < ActiveRecord::Base
  include ActiveRecord::SchemaMigration::GeneratedAssociationMethods
  include ActiveRecord::SchemaMigration::GeneratedAttributeMethods
end
module ActiveRecord::SchemaMigration::GeneratedAssociationMethods
end
class ActiveRecord::SchemaMigration::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include ActiveRecord::SchemaMigration::GeneratedRelationMethods
end
module ActiveRecord::SchemaMigration::GeneratedRelationMethods
end
class ActiveRecord::SchemaMigration::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include ActiveRecord::SchemaMigration::GeneratedRelationMethods
end
class ActiveRecord::SchemaMigration::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include ActiveRecord::SchemaMigration::GeneratedRelationMethods
end
class ActiveRecord::SchemaMigration::ActiveRecord_DisableJoinsAssociationRelation < ActiveRecord::DisableJoinsAssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include ActiveRecord::SchemaMigration::GeneratedRelationMethods
end
class ActiveRecord::Result
  include Enumerable
end
