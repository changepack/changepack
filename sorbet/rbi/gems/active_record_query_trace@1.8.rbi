# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `active_record_query_trace` gem.
# Please instead update this file by running `bin/tapioca gem active_record_query_trace`.

# source://active_record_query_trace//lib/active_record_query_trace.rb#5
module ActiveRecordQueryTrace
  class << self
    # Returns the value of attribute backtrace_cleaner.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#36
    def backtrace_cleaner; end

    # source://active_record_query_trace//lib/active_record_query_trace.rb#38
    def backtrace_cleaner=(cleaner); end

    # Returns the value of attribute colorize.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#33
    def colorize; end

    # Sets the attribute colorize
    #
    # @param value the value to set the attribute colorize to.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#33
    def colorize=(_arg0); end

    # Returns the value of attribute enabled.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#29
    def enabled; end

    # Sets the attribute enabled
    #
    # @param value the value to set the attribute enabled to.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#29
    def enabled=(_arg0); end

    # Returns the value of attribute ignore_cached_queries.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#32
    def ignore_cached_queries; end

    # Sets the attribute ignore_cached_queries
    #
    # @param value the value to set the attribute ignore_cached_queries to.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#32
    def ignore_cached_queries=(_arg0); end

    # Returns the value of attribute level.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#30
    def level; end

    # Sets the attribute level
    #
    # @param value the value to set the attribute level to.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#30
    def level=(_arg0); end

    # Returns the value of attribute lines.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#31
    def lines; end

    # Sets the attribute lines
    #
    # @param value the value to set the attribute lines to.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#31
    def lines=(_arg0); end

    # Returns the value of attribute query_type.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#34
    def query_type; end

    # Sets the attribute query_type
    #
    # @param value the value to set the attribute query_type to.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#34
    def query_type=(_arg0); end

    # Returns the value of attribute suppress_logging_of_db_reads.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#35
    def suppress_logging_of_db_reads; end

    # Sets the attribute suppress_logging_of_db_reads
    #
    # @param value the value to set the attribute suppress_logging_of_db_reads to.
    #
    # source://active_record_query_trace//lib/active_record_query_trace.rb#35
    def suppress_logging_of_db_reads=(_arg0); end
  end
end

# source://active_record_query_trace//lib/active_record_query_trace.rb#7
ActiveRecordQueryTrace::BACKTRACE_PREFIX = T.let(T.unsafe(nil), String)

# source://active_record_query_trace//lib/active_record_query_trace.rb#8
ActiveRecordQueryTrace::COLORS = T.let(T.unsafe(nil), Hash)

# source://active_record_query_trace//lib/active_record_query_trace.rb#48
class ActiveRecordQueryTrace::CustomLogSubscriber < ::ActiveRecord::LogSubscriber
  # @return [CustomLogSubscriber] a new instance of CustomLogSubscriber
  #
  # source://active_record_query_trace//lib/active_record_query_trace.rb#49
  def initialize; end

  # source://active_record_query_trace//lib/active_record_query_trace.rb#60
  def sql(event); end

  private

  # @return [Boolean]
  #
  # source://active_record_query_trace//lib/active_record_query_trace.rb#74
  def cached_query?(payload); end

  # source://active_record_query_trace//lib/active_record_query_trace.rb#125
  def clean_trace(full_trace); end

  # source://active_record_query_trace//lib/active_record_query_trace.rb#191
  def color_code; end

  # Allow query to be colorized in the terminal
  #
  # source://active_record_query_trace//lib/active_record_query_trace.rb#181
  def colorize_text(text); end

  # @return [Boolean]
  #
  # source://active_record_query_trace//lib/active_record_query_trace.rb#100
  def db_read_query?(payload); end

  # @return [Boolean]
  #
  # source://active_record_query_trace//lib/active_record_query_trace.rb#80
  def display_backtrace?(payload); end

  # @return [Boolean]
  #
  # source://active_record_query_trace//lib/active_record_query_trace.rb#89
  def display_backtrace_for_query_type?(payload); end

  # source://active_record_query_trace//lib/active_record_query_trace.rb#104
  def fully_formatted_trace; end

  # Must be called after the backtrace cleaner.
  #
  # source://active_record_query_trace//lib/active_record_query_trace.rb#112
  def lines_to_display(full_trace); end

  # Wrapper used for testing purposes.
  #
  # source://active_record_query_trace//lib/active_record_query_trace.rb#187
  def original_trace; end

  # source://active_record_query_trace//lib/active_record_query_trace.rb#215
  def rails_root_prefix; end

  # This cannot be set in a constant as Rails.root is not yet available when
  # this file is loaded.
  #
  # source://active_record_query_trace//lib/active_record_query_trace.rb#221
  def rails_root_regexp; end

  # source://active_record_query_trace//lib/active_record_query_trace.rb#175
  def remove_filters_and_silencers; end

  # @return [Boolean]
  #
  # source://active_record_query_trace//lib/active_record_query_trace.rb#120
  def schema_query?(payload); end

  # Rails by default silences all backtraces that *do not* match
  # Rails::BacktraceCleaner::APP_DIRS_PATTERN. In other words, the default
  # silencer filters out all framework backtrace lines, leaving only the
  # application lines.
  #
  # source://active_record_query_trace//lib/active_record_query_trace.rb#152
  def setup_backtrace_cleaner; end

  # Rails relies on backtrace cleaner to set the application root directory
  # filter. The problem is that the backtrace cleaner is initialized before
  # this gem. This ensures that the value of `root` used by the filter
  # is correct.
  #
  # source://active_record_query_trace//lib/active_record_query_trace.rb#170
  def setup_backtrace_cleaner_path; end

  # @return [Boolean]
  #
  # source://active_record_query_trace//lib/active_record_query_trace.rb#116
  def transaction_begin_or_commit_query?(payload); end

  # @return [Boolean]
  #
  # source://active_record_query_trace//lib/active_record_query_trace.rb#211
  def valid_color_code?(color_code); end

  # source://active_record_query_trace//lib/active_record_query_trace.rb#204
  def validate_color_code(color_code); end
end

# source://active_record_query_trace//lib/active_record_query_trace.rb#6
ActiveRecordQueryTrace::INDENTATION = T.let(T.unsafe(nil), String)
