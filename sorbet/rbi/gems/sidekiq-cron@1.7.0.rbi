# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sidekiq-cron` gem.
# Please instead update this file by running `bin/tapioca gem sidekiq-cron`.

# https://github.com/rails/rails/blob/352865d0f835c24daa9a2e9863dcc9dde9e5371a/activesupport/lib/active_support/inflector/methods.rb#L270
#
# source://sidekiq-cron//lib/sidekiq/cron/support.rb#3
module Sidekiq
  class << self
    # source://sidekiq/6.5.5/lib/sidekiq.rb#106
    def [](key); end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#110
    def []=(key, val); end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#303
    def average_scheduled_poll_interval=(interval); end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#209
    def client_middleware; end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#60
    def concurrency=(val); end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#151
    def configure_client; end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#141
    def configure_server; end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#250
    def death_handlers; end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#84
    def default_error_handler(ex, ctx); end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#237
    def default_job_options; end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#229
    def default_job_options=(hash); end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#221
    def default_server_middleware; end

    # source://activesupport/7.0.4/lib/active_support/deprecation/method_wrappers.rb#63
    def default_worker_options(*args, **_arg1, &block); end

    # source://activesupport/7.0.4/lib/active_support/deprecation/method_wrappers.rb#63
    def default_worker_options=(*args, **_arg1, &block); end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#258
    def dump_json(object); end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#294
    def ent?; end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#314
    def error_handlers; end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#118
    def fetch(*args, &block); end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#122
    def handle_exception(ex, ctx = T.unsafe(nil)); end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#254
    def load_json(string); end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#262
    def log_formatter; end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#270
    def log_formatter=(log_formatter); end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#275
    def logger; end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#279
    def logger=(logger); end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#114
    def merge!(hash); end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#326
    def on(event, &block); end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#96
    def options; end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#101
    def options=(opts); end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#290
    def pro?; end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#73
    def queues=(val); end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#159
    def redis; end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#201
    def redis=(hash); end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#181
    def redis_info; end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#197
    def redis_pool; end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#155
    def server?; end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#215
    def server_middleware; end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#332
    def strict_args!(mode = T.unsafe(nil)); end

    # source://sidekiq/6.5.5/lib/sidekiq/transaction_aware_client.rb#33
    def transactional_push!; end

    # source://sidekiq/6.5.5/lib/sidekiq.rb#55
    def ❨╯°□°❩╯︵┻━┻; end
  end
end

# source://sidekiq/6.5.5/lib/sidekiq/middleware/modules.rb#20
Sidekiq::ClientMiddleware = Sidekiq::ServerMiddleware

# source://sidekiq-cron//lib/sidekiq/cron/support.rb#4
module Sidekiq::Cron; end

# source://sidekiq-cron//lib/sidekiq/cron/job.rb#8
class Sidekiq::Cron::Job
  # @return [Job] a new instance of Job
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#268
  def initialize(input_args = T.unsafe(nil)); end

  # Active Job has different structure how it is loading data from Sidekiq
  # queue, it creates a wrapper around job.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#131
  def active_job_message; end

  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#487
  def add_jid_history(jid); end

  # Returns the value of attribute args.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#265
  def args; end

  # Sets the attribute args
  #
  # @param value the value to set the attribute args to.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#265
  def args=(_arg0); end

  # Returns the value of attribute cron.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#265
  def cron; end

  # Sets the attribute cron
  #
  # @param value the value to set the attribute cron to.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#265
  def cron=(_arg0); end

  # @return [Boolean]
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#84
  def date_as_argument?; end

  # Returns the value of attribute description.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#265
  def description; end

  # Sets the attribute description
  #
  # @param value the value to set the attribute description to.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#265
  def description=(_arg0); end

  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#502
  def destroy; end

  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#344
  def disable!; end

  # @return [Boolean]
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#358
  def disabled?; end

  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#349
  def enable!; end

  # @return [Boolean]
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#354
  def enabled?; end

  # Enqueue cron job to queue.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#48
  def enque!(time = T.unsafe(nil)); end

  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#92
  def enqueue_active_job(klass_const); end

  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#88
  def enqueue_args; end

  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#96
  def enqueue_sidekiq_worker(klass_const); end

  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#419
  def errors; end

  # @return [Boolean]
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#558
  def exists?; end

  # Returns the value of attribute fetch_missing_args.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#266
  def fetch_missing_args; end

  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#542
  def formated_enqueue_time(now = T.unsafe(nil)); end

  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#546
  def formated_last_time(now = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#78
  def is_active_job?; end

  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#389
  def jid_history_from_redis; end

  # Returns the value of attribute klass.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#265
  def klass; end

  # Sets the attribute klass
  #
  # @param value the value to set the attribute klass to.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#265
  def klass=(_arg0); end

  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#451
  def klass_valid; end

  # Returns the value of attribute last_enqueue_time.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#266
  def last_enqueue_time; end

  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#379
  def last_enqueue_time_from_redis; end

  # Parse cron specification '* * * * *' and returns
  # time when last run should be performed
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#538
  def last_time(now = T.unsafe(nil)); end

  # Returns the value of attribute message.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#265
  def message; end

  # Sets the attribute message
  #
  # @param value the value to set the attribute message to.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#265
  def message=(_arg0); end

  # Returns the value of attribute name.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#265
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#265
  def name=(_arg0); end

  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#362
  def pretty_message; end

  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#107
  def queue_name_with_prefix; end

  # Remove previous information about run times,
  # this will clear Redis and make sure that Redis will not overflow with memory.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#32
  def remove_previous_enques(time); end

  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#461
  def save; end

  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#480
  def save_last_enqueue_time; end

  # Crucial part of whole enqueuing job.
  #
  # @return [Boolean]
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#19
  def should_enque?(time); end

  # Sidekiq worker message.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#101
  def sidekiq_worker_message; end

  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#562
  def sort_name; end

  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#340
  def status; end

  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#368
  def status_from_redis; end

  # Test if job should be enqueued.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#39
  def test_and_enque_for_time!(time); end

  # Export job data to hash.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#401
  def to_hash; end

  # @return [Boolean]
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#423
  def valid?; end

  private

  # Give Hash returns array for using it for redis.hmset
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#674
  def hash_to_redis(hash); end

  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#669
  def jid_history_key; end

  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#665
  def job_enqueued_key; end

  # @return [Boolean]
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#584
  def not_enqueued_after?(time); end

  # @return [Boolean]
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#635
  def not_past_scheduled_time?(current_time); end

  # Try parsing inbound args into an array.
  # Args from Redis will be encoded JSON,
  # try to load JSON, then failover to string array.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#591
  def parse_args(args); end

  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#629
  def parse_enqueue_time(timestamp); end

  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#568
  def parsed_cron; end

  # Redis key for storing one cron job.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#652
  def redis_key; end

  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#613
  def symbolize_args(input); end

  # @return [Boolean]
  #
  # source://sidekiq-cron//lib/sidekiq/cron/job.rb#609
  def symbolize_args?; end

  class << self
    # Get all cron jobs.
    #
    # source://sidekiq-cron//lib/sidekiq/cron/job.rb#211
    def all; end

    # source://sidekiq-cron//lib/sidekiq/cron/job.rb#227
    def count; end

    # Create new instance of cron job.
    #
    # source://sidekiq-cron//lib/sidekiq/cron/job.rb#249
    def create(hash); end

    # Destroy job by name.
    #
    # source://sidekiq-cron//lib/sidekiq/cron/job.rb#254
    def destroy(name); end

    # Remove all job from cron.
    #
    # source://sidekiq-cron//lib/sidekiq/cron/job.rb#521
    def destroy_all!; end

    # Remove "removed jobs" between current jobs and new jobs
    #
    # source://sidekiq-cron//lib/sidekiq/cron/job.rb#529
    def destroy_removed_jobs(new_job_names); end

    # @return [Boolean]
    #
    # source://sidekiq-cron//lib/sidekiq/cron/job.rb#550
    def exists?(name); end

    # source://sidekiq-cron//lib/sidekiq/cron/job.rb#235
    def find(name); end

    # source://sidekiq-cron//lib/sidekiq/cron/job.rb#661
    def jid_history_key(name); end

    # Redis key for storing one cron job run times (when poller added job to queue)
    #
    # source://sidekiq-cron//lib/sidekiq/cron/job.rb#657
    def job_enqueued_key(name); end

    # Redis key for set of all cron jobs.
    #
    # source://sidekiq-cron//lib/sidekiq/cron/job.rb#642
    def jobs_key; end

    # Load cron jobs from Array.
    # Input structure should look like:
    # [
    #   {
    #     'name'        => 'name_of_job',
    #     'class'       => 'MyClass',
    #     'cron'        => '1 * * * *',
    #     'args'        => '(OPTIONAL) [Array or Hash]',
    #     'description' => '(OPTIONAL) Description of job'
    #   },
    #   {
    #     'name'  => 'Cool Job for Second Class',
    #     'class' => 'SecondClass',
    #     'cron'  => '*/5 * * * *'
    #   }
    # ]
    #
    # source://sidekiq-cron//lib/sidekiq/cron/job.rb#193
    def load_from_array(array); end

    # Like #load_from_array.
    # If exists old jobs in Redis but removed from args, destroy old jobs.
    #
    # source://sidekiq-cron//lib/sidekiq/cron/job.rb#204
    def load_from_array!(array); end

    # Load cron jobs from Hash.
    # Input structure should look like:
    # {
    #   'name_of_job' => {
    #     'class'       => 'MyClass',
    #     'cron'        => '1 * * * *',
    #     'args'        => '(OPTIONAL) [Array or Hash]',
    #     'description' => '(OPTIONAL) Description of job'
    #   },
    #   'My super iber cool job' => {
    #     'class' => 'SecondClass',
    #     'cron'  => '*/5 * * * *'
    #   }
    # }
    #
    # source://sidekiq-cron//lib/sidekiq/cron/job.rb#161
    def load_from_hash(hash); end

    # Like #load_from_hash.
    # If exists old jobs in Redis but removed from args, destroy old jobs.
    #
    # source://sidekiq-cron//lib/sidekiq/cron/job.rb#171
    def load_from_hash!(hash); end

    # Redis key for storing one cron job.
    #
    # source://sidekiq-cron//lib/sidekiq/cron/job.rb#647
    def redis_key(name); end
  end
end

# Time format for enqueued jobs.
#
# source://sidekiq-cron//lib/sidekiq/cron/job.rb#13
Sidekiq::Cron::Job::LAST_ENQUEUE_TIME_FORMAT = T.let(T.unsafe(nil), String)

# Use the exists? method if we're on a newer version of Redis.
#
# source://sidekiq-cron//lib/sidekiq/cron/job.rb#16
Sidekiq::Cron::Job::REDIS_EXISTS_METHOD = T.let(T.unsafe(nil), Symbol)

# How long we would like to store informations about previous enqueues.
#
# source://sidekiq-cron//lib/sidekiq/cron/job.rb#10
Sidekiq::Cron::Job::REMEMBER_THRESHOLD = T.let(T.unsafe(nil), Integer)

# source://sidekiq-cron//lib/sidekiq/cron/launcher.rb#10
module Sidekiq::Cron::Launcher
  # Add cron poller and execute normal initialize of Sidekiq launcher.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/launcher.rb#15
  def initialize(options); end

  # Add cron poller to launcher.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/launcher.rb#12
  def cron_poller; end

  # Execute normal quiet of launcher and quiet cron poller.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/launcher.rb#27
  def quiet; end

  # Execute normal run of launcher and run cron poller.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/launcher.rb#21
  def run; end

  # Execute normal stop of launcher and stop cron poller.
  #
  # source://sidekiq-cron//lib/sidekiq/cron/launcher.rb#33
  def stop; end
end

# source://sidekiq-cron//lib/sidekiq/cron/poller.rb#8
Sidekiq::Cron::POLL_INTERVAL = T.let(T.unsafe(nil), Integer)

# The Poller checks Redis every N seconds for sheduled cron jobs.
#
# source://sidekiq-cron//lib/sidekiq/cron/poller.rb#11
class Sidekiq::Cron::Poller < ::Sidekiq::Scheduled::Poller
  # @return [Poller] a new instance of Poller
  #
  # source://sidekiq-cron//lib/sidekiq/cron/poller.rb#12
  def initialize; end

  # source://sidekiq-cron//lib/sidekiq/cron/poller.rb#25
  def enqueue; end

  private

  # source://sidekiq-cron//lib/sidekiq/cron/poller.rb#40
  def enqueue_job(job, time = T.unsafe(nil)); end
end

# source://sidekiq-cron//lib/sidekiq/cron/support.rb#5
module Sidekiq::Cron::Support
  class << self
    # source://sidekiq-cron//lib/sidekiq/cron/support.rb#6
    def constantize(camel_cased_word); end
  end
end

# source://sidekiq/6.5.5/lib/sidekiq.rb#20
Sidekiq::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://sidekiq/6.5.5/lib/sidekiq.rb#93
Sidekiq::DEFAULT_ERROR_HANDLER = T.let(T.unsafe(nil), Method)

# source://sidekiq/6.5.5/lib/sidekiq.rb#47
Sidekiq::FAKE_INFO = T.let(T.unsafe(nil), Hash)

# source://sidekiq/6.5.5/lib/sidekiq/job.rb#12
Sidekiq::Job = Sidekiq::Worker

# source://sidekiq/6.5.5/lib/sidekiq.rb#18
Sidekiq::LICENSE = T.let(T.unsafe(nil), String)

# source://sidekiq/6.5.5/lib/sidekiq.rb#17
Sidekiq::NAME = T.let(T.unsafe(nil), String)

# source://sidekiq-cron//lib/sidekiq/options.rb#4
module Sidekiq::Options
  class << self
    # source://sidekiq-cron//lib/sidekiq/options.rb#5
    def [](key); end

    # source://sidekiq-cron//lib/sidekiq/options.rb#9
    def []=(key, value); end

    # sidekiq --version >= 6.5.0
    #
    # @return [Boolean]
    #
    # source://sidekiq-cron//lib/sidekiq/options.rb#14
    def new_version?; end
  end
end

# source://sidekiq/6.5.5/lib/sidekiq/version.rb#4
Sidekiq::VERSION = T.let(T.unsafe(nil), String)
