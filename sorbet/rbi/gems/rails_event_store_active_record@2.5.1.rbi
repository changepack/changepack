# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rails_event_store_active_record` gem.
# Please instead update this file by running `bin/tapioca gem rails_event_store_active_record`.

# source://rails_event_store_active_record//lib/rails_event_store_active_record/generators/migration_generator.rb#8
module RailsEventStoreActiveRecord; end

# source://rails_event_store_active_record//lib/rails_event_store_active_record/batch_enumerator.rb#4
class RailsEventStoreActiveRecord::BatchEnumerator
  # @return [BatchEnumerator] a new instance of BatchEnumerator
  #
  # source://rails_event_store_active_record//lib/rails_event_store_active_record/batch_enumerator.rb#5
  def initialize(batch_size, total_limit, reader); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/batch_enumerator.rb#11
  def each; end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/batch_enumerator.rb#24
  def first; end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/batch_enumerator.rb#28
  def to_a; end

  private

  # Returns the value of attribute batch_size.
  #
  # source://rails_event_store_active_record//lib/rails_event_store_active_record/batch_enumerator.rb#34
  def batch_size; end

  # Returns the value of attribute reader.
  #
  # source://rails_event_store_active_record//lib/rails_event_store_active_record/batch_enumerator.rb#34
  def reader; end

  # Returns the value of attribute total_limit.
  #
  # source://rails_event_store_active_record//lib/rails_event_store_active_record/batch_enumerator.rb#34
  def total_limit; end
end

# source://rails_event_store_active_record//lib/rails_event_store_active_record/event.rb#6
class RailsEventStoreActiveRecord::Event < ::ActiveRecord::Base
  include ::RailsEventStoreActiveRecord::Event::GeneratedAttributeMethods
  include ::RailsEventStoreActiveRecord::Event::GeneratedAssociationMethods

  class << self
    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://activerecord/7.0.4/lib/active_record/enum.rb#116
    def defined_enums; end
  end
end

# source://rails_event_store_active_record//lib/rails_event_store_active_record/event.rb#0
module RailsEventStoreActiveRecord::Event::GeneratedAssociationMethods; end

# source://rails_event_store_active_record//lib/rails_event_store_active_record/event.rb#0
module RailsEventStoreActiveRecord::Event::GeneratedAttributeMethods; end

# source://rails_event_store_active_record//lib/rails_event_store_active_record/event.rb#11
class RailsEventStoreActiveRecord::EventInStream < ::ActiveRecord::Base
  include ::RailsEventStoreActiveRecord::EventInStream::GeneratedAttributeMethods
  include ::RailsEventStoreActiveRecord::EventInStream::GeneratedAssociationMethods

  # source://activerecord/7.0.4/lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_event(*args); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://activerecord/7.0.4/lib/active_record/enum.rb#116
    def defined_enums; end
  end
end

# source://rails_event_store_active_record//lib/rails_event_store_active_record/event.rb#0
module RailsEventStoreActiveRecord::EventInStream::GeneratedAssociationMethods
  # source://activerecord/7.0.4/lib/active_record/associations/builder/singular_association.rb#28
  def build_event(*args, &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/builder/singular_association.rb#32
  def create_event(*args, &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/builder/singular_association.rb#36
  def create_event!(*args, &block); end

  # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#103
  def event; end

  # source://activerecord/7.0.4/lib/active_record/associations/builder/association.rb#111
  def event=(value); end

  # source://activerecord/7.0.4/lib/active_record/associations/builder/belongs_to.rb#132
  def event_changed?; end

  # source://activerecord/7.0.4/lib/active_record/associations/builder/belongs_to.rb#136
  def event_previously_changed?; end

  # source://activerecord/7.0.4/lib/active_record/associations/builder/singular_association.rb#19
  def reload_event; end
end

# source://rails_event_store_active_record//lib/rails_event_store_active_record/event.rb#0
module RailsEventStoreActiveRecord::EventInStream::GeneratedAttributeMethods; end

# source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository.rb#6
class RailsEventStoreActiveRecord::EventRepository
  # @return [EventRepository] a new instance of EventRepository
  #
  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository.rb#9
  def initialize(serializer:, model_factory: T.unsafe(nil)); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository.rb#17
  def append_to_stream(records, stream, expected_version); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository.rb#52
  def count(specification); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository.rb#36
  def delete_stream(stream); end

  # @return [Boolean]
  #
  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository.rb#86
  def event_in_stream?(event_id, stream); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository.rb#82
  def global_position(event_id); end

  # @return [Boolean]
  #
  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository.rb#40
  def has_event?(event_id); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository.rb#44
  def last_stream_event(stream); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository.rb#29
  def link_to_stream(event_ids, stream, expected_version); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository.rb#78
  def position_in_stream(event_id, stream); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository.rb#48
  def read(specification); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository.rb#74
  def streams_of(event_id); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository.rb#56
  def update_messages(records); end

  private

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository.rb#94
  def add_to_stream(event_ids, stream, expected_version); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository.rb#123
  def compute_position(resolved_version, index); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository.rb#127
  def detect_index_violated(message); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository.rb#131
  def insert_hash(record, serialized_record); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository.rb#152
  def optimize_timestamp(valid_at, created_at); end

  # @raise [RubyEventStore::EventDuplicatedInStream]
  #
  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository.rb#118
  def raise_error(e); end

  # Returns the value of attribute serializer.
  #
  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository.rb#92
  def serializer; end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository.rb#156
  def start_transaction(&block); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository.rb#142
  def upsert_hash(record, serialized_record); end
end

# source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository.rb#7
RailsEventStoreActiveRecord::EventRepository::POSITION_SHIFT = T.let(T.unsafe(nil), Integer)

# source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#4
class RailsEventStoreActiveRecord::EventRepositoryReader
  # @return [EventRepositoryReader] a new instance of EventRepositoryReader
  #
  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#5
  def initialize(event_klass, stream_klass, serializer); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#35
  def count(spec); end

  # @return [Boolean]
  #
  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#55
  def event_in_stream?(event_id, stream); end

  # @raise [RubyEventStore::EventNotFound]
  #
  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#49
  def global_position(event_id); end

  # @return [Boolean]
  #
  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#11
  def has_event?(event_id); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#15
  def last_stream_event(stream); end

  # @raise [RubyEventStore::EventNotFoundInStream]
  #
  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#43
  def position_in_stream(event_id, stream); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#20
  def read(spec); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#39
  def streams_of(event_id); end

  private

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#68
  def monotonic_id_batch_reader(spec, stream); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#170
  def newer_than_condition(specification); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#174
  def newer_than_or_equal_condition(specification); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#63
  def offset_limit_batch_reader(spec, stream); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#162
  def older_than_condition(specification); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#166
  def older_than_or_equal_condition(specification); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#178
  def order(spec); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#113
  def ordered(stream, spec); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#82
  def read_scope(spec); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#182
  def record(record); end

  # Returns the value of attribute serializer.
  #
  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#61
  def serializer; end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#134
  def start_condition(specification); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#150
  def start_condition_in_global_stream(specification); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#124
  def start_offset_condition(specification, record_id, search_in); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#142
  def stop_condition(specification); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#158
  def stop_condition_in_global_stream(specification); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/event_repository_reader.rb#129
  def stop_offset_condition(specification, record_id, search_in); end
end

# source://rails_event_store_active_record//lib/rails_event_store_active_record/index_violation_detector.rb#4
class RailsEventStoreActiveRecord::IndexViolationDetector
  # @return [IndexViolationDetector] a new instance of IndexViolationDetector
  #
  # source://rails_event_store_active_record//lib/rails_event_store_active_record/index_violation_detector.rb#5
  def initialize(event_store_events, event_store_events_in_streams); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/index_violation_detector.rb#19
  def detect(message); end

  private

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/index_violation_detector.rb#29
  def detect_mysql(message); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/index_violation_detector.rb#25
  def detect_postgres(message); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/index_violation_detector.rb#34
  def detect_sqlite(message); end
end

# source://rails_event_store_active_record//lib/rails_event_store_active_record/generators/migration_generator.rb#9
class RailsEventStoreActiveRecord::MigrationGenerator < ::Rails::Generators::Base
  # @return [MigrationGenerator] a new instance of MigrationGenerator
  #
  # source://rails_event_store_active_record//lib/rails_event_store_active_record/generators/migration_generator.rb#24
  def initialize(*args); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/generators/migration_generator.rb#32
  def create_migration; end

  private

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/generators/migration_generator.rb#38
  def data_type; end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/generators/migration_generator.rb#42
  def migration_version; end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/generators/migration_generator.rb#46
  def timestamp; end
end

# source://rails_event_store_active_record//lib/rails_event_store_active_record/generators/migration_generator.rb#13
RailsEventStoreActiveRecord::MigrationGenerator::DATA_TYPES = T.let(T.unsafe(nil), Array)

# source://rails_event_store_active_record//lib/rails_event_store_active_record/generators/migration_generator.rb#10
class RailsEventStoreActiveRecord::MigrationGenerator::Error < ::Thor::Error; end

# source://rails_event_store_active_record//lib/rails_event_store_active_record/pg_linearized_event_repository.rb#4
class RailsEventStoreActiveRecord::PgLinearizedEventRepository < ::RailsEventStoreActiveRecord::EventRepository
  # source://rails_event_store_active_record//lib/rails_event_store_active_record/pg_linearized_event_repository.rb#5
  def start_transaction(&proc); end
end

# source://rails_event_store_active_record//lib/rails_event_store_active_record/version.rb#4
RailsEventStoreActiveRecord::VERSION = T.let(T.unsafe(nil), String)

# source://rails_event_store_active_record//lib/rails_event_store_active_record/with_abstract_base_class.rb#4
class RailsEventStoreActiveRecord::WithAbstractBaseClass
  # @return [WithAbstractBaseClass] a new instance of WithAbstractBaseClass
  #
  # source://rails_event_store_active_record//lib/rails_event_store_active_record/with_abstract_base_class.rb#5
  def initialize(base_klass); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/with_abstract_base_class.rb#12
  def call(instance_id: T.unsafe(nil)); end

  private

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/with_abstract_base_class.rb#18
  def build_event_klass(instance_id); end

  # source://rails_event_store_active_record//lib/rails_event_store_active_record/with_abstract_base_class.rb#28
  def build_stream_klass(instance_id); end
end

# source://rails_event_store_active_record//lib/rails_event_store_active_record/with_default_models.rb#4
class RailsEventStoreActiveRecord::WithDefaultModels
  # source://rails_event_store_active_record//lib/rails_event_store_active_record/with_default_models.rb#5
  def call; end
end
