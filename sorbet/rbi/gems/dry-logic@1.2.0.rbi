# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dry-logic` gem.
# Please instead update this file by running `bin/tapioca gem dry-logic`.

# A collection of micro-libraries, each intended to encapsulate
# a common task in Ruby
#
# source://dry-logic//lib/dry/logic/operators.rb#3
module Dry
  class << self
    # Build an equalizer module for the inclusion in other class
    #
    # ## Credits
    #
    # Equalizer has been originally imported from the equalizer gem created by Dan Kubb
    #
    # @api public
    #
    # source://dry-core/0.7.1/lib/dry/core/equalizer.rb#11
    def Equalizer(*keys, **options); end

    # source://dry-struct/1.4.0/lib/dry/struct.rb#33
    def Struct(attributes = T.unsafe(nil), &block); end

    # source://dry-types/1.5.1/lib/dry/types.rb#226
    def Types(*namespaces, default: T.unsafe(nil), **aliases); end
  end
end

# source://dry-logic//lib/dry/logic/operators.rb#4
module Dry::Logic
  class << self
    # source://dry-logic//lib/dry/logic/rule.rb#12
    def Rule(*args, **options, &block); end
  end
end

# source://dry-logic//lib/dry/logic/evaluator.rb#7
class Dry::Logic::Evaluator
  include ::Dry::Core::Equalizer::Methods

  # @return [Evaluator] a new instance of Evaluator
  #
  # source://dry-logic//lib/dry/logic/evaluator.rb#45
  def initialize(path); end

  # Returns the value of attribute path.
  #
  # source://dry-logic//lib/dry/logic/evaluator.rb#10
  def path; end
end

# source://dry-logic//lib/dry/logic/evaluator.rb#38
class Dry::Logic::Evaluator::Attr < ::Dry::Logic::Evaluator
  # source://dry-logic//lib/dry/logic/evaluator.rb#39
  def [](input); end

  # source://dry-logic//lib/dry/logic/evaluator.rb#39
  def call(input); end
end

# source://dry-logic//lib/dry/logic/evaluator.rb#31
class Dry::Logic::Evaluator::Key < ::Dry::Logic::Evaluator
  # source://dry-logic//lib/dry/logic/evaluator.rb#32
  def [](input); end

  # source://dry-logic//lib/dry/logic/evaluator.rb#32
  def call(input); end
end

# source://dry-logic//lib/dry/logic/evaluator.rb#12
class Dry::Logic::Evaluator::Set
  include ::Dry::Core::Equalizer::Methods

  # @return [Set] a new instance of Set
  #
  # source://dry-logic//lib/dry/logic/evaluator.rb#21
  def initialize(evaluators); end

  # source://dry-logic//lib/dry/logic/evaluator.rb#25
  def [](input); end

  # source://dry-logic//lib/dry/logic/evaluator.rb#25
  def call(input); end

  # Returns the value of attribute evaluators.
  #
  # source://dry-logic//lib/dry/logic/evaluator.rb#15
  def evaluators; end

  class << self
    # source://dry-logic//lib/dry/logic/evaluator.rb#17
    def new(paths); end
  end
end

# source://dry-logic//lib/dry/logic/operations/abstract.rb#9
module Dry::Logic::Operations; end

# source://dry-logic//lib/dry/logic/operations/abstract.rb#10
class Dry::Logic::Operations::Abstract
  include ::Dry::Core::Constants
  include ::Dry::Core::Equalizer::Methods
  include ::Dry::Logic::Operators

  # @return [Abstract] a new instance of Abstract
  #
  # source://dry-logic//lib/dry/logic/operations/abstract.rb#19
  def initialize(*rules, **options); end

  # source://dry-logic//lib/dry/logic/operations/abstract.rb#28
  def curry(*args); end

  # source://dry-logic//lib/dry/logic/operations/abstract.rb#24
  def id; end

  # source://dry-logic//lib/dry/logic/operations/abstract.rb#32
  def new(rules, **new_options); end

  # Returns the value of attribute options.
  #
  # source://dry-logic//lib/dry/logic/operations/abstract.rb#17
  def options; end

  # Returns the value of attribute rules.
  #
  # source://dry-logic//lib/dry/logic/operations/abstract.rb#15
  def rules; end

  # source://dry-logic//lib/dry/logic/operations/abstract.rb#40
  def to_ast; end

  # source://dry-logic//lib/dry/logic/operations/abstract.rb#36
  def with(new_options); end
end

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::Operations::Abstract::EMPTY_ARRAY = T.let(T.unsafe(nil), Array)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::Operations::Abstract::EMPTY_HASH = T.let(T.unsafe(nil), Hash)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::Operations::Abstract::EMPTY_OPTS = T.let(T.unsafe(nil), Hash)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::Operations::Abstract::EMPTY_SET = T.let(T.unsafe(nil), Set)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::Operations::Abstract::EMPTY_STRING = T.let(T.unsafe(nil), String)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::Operations::Abstract::IDENTITY = T.let(T.unsafe(nil), Proc)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::Operations::Abstract::Self = T.let(T.unsafe(nil), Proc)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::Operations::Abstract::Undefined = T.let(T.unsafe(nil), Object)

# source://dry-logic//lib/dry/logic/operations/and.rb#9
class Dry::Logic::Operations::And < ::Dry::Logic::Operations::Binary
  # @return [And] a new instance of And
  #
  # source://dry-logic//lib/dry/logic/operations/and.rb#12
  def initialize(*_arg0, **_arg1); end

  # source://dry-logic//lib/dry/logic/operations/and.rb#41
  def [](input); end

  # source://dry-logic//lib/dry/logic/operations/and.rb#22
  def call(input); end

  # Returns the value of attribute hints.
  #
  # source://dry-logic//lib/dry/logic/operations/and.rb#10
  def hints; end

  # source://dry-logic//lib/dry/logic/operations/and.rb#17
  def operator; end

  # source://dry-logic//lib/dry/logic/operations/and.rb#17
  def type; end
end

# source://dry-logic//lib/dry/logic/operations/attr.rb#8
class Dry::Logic::Operations::Attr < ::Dry::Logic::Operations::Key
  # source://dry-logic//lib/dry/logic/operations/attr.rb#13
  def type; end

  class << self
    # source://dry-logic//lib/dry/logic/operations/attr.rb#9
    def evaluator(name); end
  end
end

# source://dry-logic//lib/dry/logic/operations/binary.rb#8
class Dry::Logic::Operations::Binary < ::Dry::Logic::Operations::Abstract
  # @return [Binary] a new instance of Binary
  #
  # source://dry-logic//lib/dry/logic/operations/binary.rb#13
  def initialize(left, right, **options); end

  # source://dry-logic//lib/dry/logic/operations/binary.rb#19
  def ast(input = T.unsafe(nil)); end

  # Returns the value of attribute left.
  #
  # source://dry-logic//lib/dry/logic/operations/binary.rb#9
  def left; end

  # Returns the value of attribute right.
  #
  # source://dry-logic//lib/dry/logic/operations/binary.rb#11
  def right; end

  # source://dry-logic//lib/dry/logic/operations/binary.rb#23
  def to_s; end
end

# source://dry-logic//lib/dry/logic/operations/check.rb#10
class Dry::Logic::Operations::Check < ::Dry::Logic::Operations::Unary
  # @return [Check] a new instance of Check
  #
  # source://dry-logic//lib/dry/logic/operations/check.rb#24
  def initialize(*rules, **options); end

  # source://dry-logic//lib/dry/logic/operations/check.rb#44
  def [](input); end

  # source://dry-logic//lib/dry/logic/operations/check.rb#48
  def ast(input = T.unsafe(nil)); end

  # source://dry-logic//lib/dry/logic/operations/check.rb#33
  def call(input); end

  # Returns the value of attribute evaluator.
  #
  # source://dry-logic//lib/dry/logic/operations/check.rb#11
  def evaluator; end

  # source://dry-logic//lib/dry/logic/operations/check.rb#29
  def type; end

  class << self
    # source://dry-logic//lib/dry/logic/operations/check.rb#13
    def new(rule, **options); end
  end
end

# source://dry-logic//lib/dry/logic/operations/each.rb#9
class Dry::Logic::Operations::Each < ::Dry::Logic::Operations::Unary
  # source://dry-logic//lib/dry/logic/operations/each.rb#28
  def [](arr); end

  # source://dry-logic//lib/dry/logic/operations/each.rb#14
  def call(input); end

  # source://dry-logic//lib/dry/logic/operations/each.rb#10
  def type; end
end

# source://dry-logic//lib/dry/logic/operations/implication.rb#9
class Dry::Logic::Operations::Implication < ::Dry::Logic::Operations::Binary
  # source://dry-logic//lib/dry/logic/operations/implication.rb#29
  def [](input); end

  # source://dry-logic//lib/dry/logic/operations/implication.rb#18
  def call(input); end

  # source://dry-logic//lib/dry/logic/operations/implication.rb#14
  def operator; end

  # source://dry-logic//lib/dry/logic/operations/implication.rb#10
  def type; end
end

# source://dry-logic//lib/dry/logic/operations/key.rb#10
class Dry::Logic::Operations::Key < ::Dry::Logic::Operations::Unary
  # @return [Key] a new instance of Key
  #
  # source://dry-logic//lib/dry/logic/operations/key.rb#29
  def initialize(*rules, **options); end

  # source://dry-logic//lib/dry/logic/operations/key.rb#50
  def [](hash); end

  # source://dry-logic//lib/dry/logic/operations/key.rb#54
  def ast(input = T.unsafe(nil)); end

  # source://dry-logic//lib/dry/logic/operations/key.rb#39
  def call(hash); end

  # Returns the value of attribute evaluator.
  #
  # source://dry-logic//lib/dry/logic/operations/key.rb#11
  def evaluator; end

  # Returns the value of attribute path.
  #
  # source://dry-logic//lib/dry/logic/operations/key.rb#13
  def path; end

  # source://dry-logic//lib/dry/logic/operations/key.rb#62
  def to_s; end

  # source://dry-logic//lib/dry/logic/operations/key.rb#35
  def type; end

  class << self
    # source://dry-logic//lib/dry/logic/operations/key.rb#25
    def evaluator(name); end

    # source://dry-logic//lib/dry/logic/operations/key.rb#15
    def new(rules, **options); end
  end
end

# source://dry-logic//lib/dry/logic/operations/negation.rb#9
class Dry::Logic::Operations::Negation < ::Dry::Logic::Operations::Unary
  # source://dry-logic//lib/dry/logic/operations/negation.rb#18
  def [](input); end

  # source://dry-logic//lib/dry/logic/operations/negation.rb#14
  def call(input); end

  # source://dry-logic//lib/dry/logic/operations/negation.rb#10
  def type; end
end

# source://dry-logic//lib/dry/logic/operations/or.rb#9
class Dry::Logic::Operations::Or < ::Dry::Logic::Operations::Binary
  # source://dry-logic//lib/dry/logic/operations/or.rb#31
  def [](input); end

  # source://dry-logic//lib/dry/logic/operations/or.rb#15
  def call(input); end

  # source://dry-logic//lib/dry/logic/operations/or.rb#10
  def operator; end

  # source://dry-logic//lib/dry/logic/operations/or.rb#10
  def type; end
end

# source://dry-logic//lib/dry/logic/operations/set.rb#9
class Dry::Logic::Operations::Set < ::Dry::Logic::Operations::Abstract
  # source://dry-logic//lib/dry/logic/operations/set.rb#23
  def [](input); end

  # source://dry-logic//lib/dry/logic/operations/set.rb#27
  def ast(input = T.unsafe(nil)); end

  # source://dry-logic//lib/dry/logic/operations/set.rb#14
  def call(input); end

  # source://dry-logic//lib/dry/logic/operations/set.rb#31
  def to_s; end

  # source://dry-logic//lib/dry/logic/operations/set.rb#10
  def type; end
end

# source://dry-logic//lib/dry/logic/operations/unary.rb#8
class Dry::Logic::Operations::Unary < ::Dry::Logic::Operations::Abstract
  # @return [Unary] a new instance of Unary
  #
  # source://dry-logic//lib/dry/logic/operations/unary.rb#11
  def initialize(*rules, **options); end

  # source://dry-logic//lib/dry/logic/operations/unary.rb#16
  def ast(input = T.unsafe(nil)); end

  # Returns the value of attribute rule.
  #
  # source://dry-logic//lib/dry/logic/operations/unary.rb#9
  def rule; end

  # source://dry-logic//lib/dry/logic/operations/unary.rb#20
  def to_s; end
end

# source://dry-logic//lib/dry/logic/operations/xor.rb#9
class Dry::Logic::Operations::Xor < ::Dry::Logic::Operations::Binary
  # source://dry-logic//lib/dry/logic/operations/xor.rb#19
  def [](input); end

  # source://dry-logic//lib/dry/logic/operations/xor.rb#23
  def ast(input = T.unsafe(nil)); end

  # source://dry-logic//lib/dry/logic/operations/xor.rb#15
  def call(input); end

  # source://dry-logic//lib/dry/logic/operations/xor.rb#10
  def operator; end

  # source://dry-logic//lib/dry/logic/operations/xor.rb#10
  def type; end
end

# source://dry-logic//lib/dry/logic/operators.rb#5
module Dry::Logic::Operators
  # source://dry-logic//lib/dry/logic/operators.rb#6
  def &(other); end

  # source://dry-logic//lib/dry/logic/operators.rb#21
  def >(other); end

  # source://dry-logic//lib/dry/logic/operators.rb#16
  def ^(other); end

  # source://dry-logic//lib/dry/logic/operators.rb#6
  def and(other); end

  # source://dry-logic//lib/dry/logic/operators.rb#11
  def or(other); end

  # source://dry-logic//lib/dry/logic/operators.rb#21
  def then(other); end

  # source://dry-logic//lib/dry/logic/operators.rb#16
  def xor(other); end

  # source://dry-logic//lib/dry/logic/operators.rb#11
  def |(other); end
end

# source://dry-logic//lib/dry/logic/predicates.rb#9
module Dry::Logic::Predicates
  extend ::Dry::Logic::Predicates::Methods

  mixes_in_class_methods ::Dry::Logic::Predicates::Methods

  class << self
    # @private
    #
    # source://dry-logic//lib/dry/logic/predicates.rb#250
    def included(other); end
  end
end

# source://dry-logic//lib/dry/logic/predicates.rb#10
module Dry::Logic::Predicates::Methods
  # source://dry-logic//lib/dry/logic/predicates.rb#11
  def [](name); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#87
  def array?(input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#28
  def attr?(name, input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#45
  def bool?(input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#132
  def bytesize?(size, input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#205
  def case?(pattern, input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#49
  def date?(input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#53
  def date_time?(input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#75
  def decimal?(input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#32
  def empty?(input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#181
  def eql?(left, right); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#95
  def even?(input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#163
  def excluded_from?(list, input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#177
  def excludes?(value, input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#154
  def exclusion?(list, input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#197
  def false?(value); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#41
  def filled?(input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#71
  def float?(input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#201
  def format?(regex, input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#103
  def gt?(num, input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#111
  def gteq?(num, input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#83
  def hash?(input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#159
  def included_in?(list, input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#167
  def includes?(value, input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#149
  def inclusion?(list, input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#67
  def int?(input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#185
  def is?(left, right); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#24
  def key?(name, input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#99
  def lt?(num, input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#107
  def lteq?(num, input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#145
  def max_bytesize?(num, input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#128
  def max_size?(num, input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#141
  def min_bytesize?(num, input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#124
  def min_size?(num, input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#19
  def nil?(input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#19
  def none?(input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#189
  def not_eql?(left, right); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#61
  def number?(input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#91
  def odd?(input); end

  # source://dry-logic//lib/dry/logic/predicates.rb#243
  def predicate(name, &block); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#239
  def respond_to?(method, input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#115
  def size?(size, input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#79
  def str?(input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#57
  def time?(input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#193
  def true?(value); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#15
  def type?(type, input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#234
  def uri?(schemes, input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#209
  def uuid_v1?(input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#214
  def uuid_v2?(input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#219
  def uuid_v3?(input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#224
  def uuid_v4?(input); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/predicates.rb#229
  def uuid_v5?(input); end
end

# source://dry-logic//lib/dry/logic/result.rb#7
class Dry::Logic::Result
  include ::Dry::Core::Constants

  # @return [Result] a new instance of Result
  #
  # source://dry-logic//lib/dry/logic/result.rb#26
  def initialize(success, id = T.unsafe(nil), &block); end

  # source://dry-logic//lib/dry/logic/result.rb#44
  def ast(input = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/result.rb#36
  def failure?; end

  # Returns the value of attribute id.
  #
  # source://dry-logic//lib/dry/logic/result.rb#22
  def id; end

  # Returns the value of attribute serializer.
  #
  # source://dry-logic//lib/dry/logic/result.rb#24
  def serializer; end

  # Returns the value of attribute success.
  #
  # source://dry-logic//lib/dry/logic/result.rb#20
  def success; end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/result.rb#32
  def success?; end

  # source://dry-logic//lib/dry/logic/result.rb#48
  def to_ast; end

  # source://dry-logic//lib/dry/logic/result.rb#56
  def to_s; end

  # source://dry-logic//lib/dry/logic/result.rb#40
  def type; end

  private

  # source://dry-logic//lib/dry/logic/result.rb#62
  def visit(ast); end

  # source://dry-logic//lib/dry/logic/result.rb#76
  def visit_and(node); end

  # source://dry-logic//lib/dry/logic/result.rb#95
  def visit_hint(node); end

  # source://dry-logic//lib/dry/logic/result.rb#91
  def visit_not(node); end

  # source://dry-logic//lib/dry/logic/result.rb#81
  def visit_or(node); end

  # source://dry-logic//lib/dry/logic/result.rb#66
  def visit_predicate(node); end

  # source://dry-logic//lib/dry/logic/result.rb#86
  def visit_xor(node); end
end

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::Result::EMPTY_ARRAY = T.let(T.unsafe(nil), Array)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::Result::EMPTY_HASH = T.let(T.unsafe(nil), Hash)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::Result::EMPTY_OPTS = T.let(T.unsafe(nil), Hash)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::Result::EMPTY_SET = T.let(T.unsafe(nil), Set)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::Result::EMPTY_STRING = T.let(T.unsafe(nil), String)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::Result::IDENTITY = T.let(T.unsafe(nil), Proc)

# source://dry-logic//lib/dry/logic/result.rb#10
Dry::Logic::Result::SUCCESS = T.let(T.unsafe(nil), T.untyped)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::Result::Self = T.let(T.unsafe(nil), Proc)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::Result::Undefined = T.let(T.unsafe(nil), Object)

# source://dry-logic//lib/dry/logic/rule/interface.rb#5
class Dry::Logic::Rule
  include ::Dry::Core::Constants
  include ::Dry::Core::Equalizer::Methods
  include ::Dry::Logic::Operators

  # @return [Rule] a new instance of Rule
  #
  # source://dry-logic//lib/dry/logic/rule.rb#50
  def initialize(predicate, options = T.unsafe(nil)); end

  # Returns the value of attribute args.
  #
  # source://dry-logic//lib/dry/logic/rule.rb#29
  def args; end

  # Returns the value of attribute arity.
  #
  # source://dry-logic//lib/dry/logic/rule.rb#31
  def arity; end

  # source://dry-logic//lib/dry/logic/rule.rb#92
  def ast(input = T.unsafe(nil)); end

  # source://dry-logic//lib/dry/logic/rule.rb#69
  def bind(object); end

  # source://dry-logic//lib/dry/logic/rule.rb#65
  def curry(*new_args); end

  # source://dry-logic//lib/dry/logic/rule.rb#80
  def eval_args(object); end

  # source://dry-logic//lib/dry/logic/rule.rb#61
  def id; end

  # Returns the value of attribute options.
  #
  # source://dry-logic//lib/dry/logic/rule.rb#27
  def options; end

  # source://dry-logic//lib/dry/logic/rule.rb#88
  def parameters; end

  # Returns the value of attribute predicate.
  #
  # source://dry-logic//lib/dry/logic/rule.rb#25
  def predicate; end

  # source://dry-logic//lib/dry/logic/rule.rb#57
  def type; end

  # source://dry-logic//lib/dry/logic/rule.rb#84
  def with(new_opts); end

  private

  # source://dry-logic//lib/dry/logic/rule.rb#98
  def args_with_names(*input); end

  class << self
    # source://dry-logic//lib/dry/logic/rule.rb#46
    def build(predicate, args: T.unsafe(nil), arity: T.unsafe(nil), **options); end

    # source://dry-logic//lib/dry/logic/rule.rb#33
    def interfaces; end

    # source://dry-logic//lib/dry/logic/rule.rb#37
    def specialize(arity, curried, base = T.unsafe(nil)); end
  end
end

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::Rule::EMPTY_ARRAY = T.let(T.unsafe(nil), Array)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::Rule::EMPTY_HASH = T.let(T.unsafe(nil), Hash)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::Rule::EMPTY_OPTS = T.let(T.unsafe(nil), Hash)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::Rule::EMPTY_SET = T.let(T.unsafe(nil), Set)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::Rule::EMPTY_STRING = T.let(T.unsafe(nil), String)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::Rule::IDENTITY = T.let(T.unsafe(nil), Proc)

# source://dry-logic//lib/dry/logic/rule/interface.rb#6
class Dry::Logic::Rule::Interface < ::Module
  # @return [Interface] a new instance of Interface
  #
  # source://dry-logic//lib/dry/logic/rule/interface.rb#13
  def initialize(arity, curried); end

  # Returns the value of attribute arity.
  #
  # source://dry-logic//lib/dry/logic/rule/interface.rb#9
  def arity; end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/rule/interface.rb#30
  def constant?; end

  # Returns the value of attribute curried.
  #
  # source://dry-logic//lib/dry/logic/rule/interface.rb#11
  def curried; end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/rule/interface.rb#38
  def curried?; end

  # source://dry-logic//lib/dry/logic/rule/interface.rb#131
  def curried_args; end

  # source://dry-logic//lib/dry/logic/rule/interface.rb#111
  def define_application; end

  # source://dry-logic//lib/dry/logic/rule/interface.rb#95
  def define_constant_application; end

  # source://dry-logic//lib/dry/logic/rule/interface.rb#78
  def define_constructor; end

  # source://dry-logic//lib/dry/logic/rule/interface.rb#56
  def name; end

  # source://dry-logic//lib/dry/logic/rule/interface.rb#42
  def unapplied; end

  # source://dry-logic//lib/dry/logic/rule/interface.rb#135
  def unapplied_args; end

  # @return [Boolean]
  #
  # source://dry-logic//lib/dry/logic/rule/interface.rb#34
  def variable_arity?; end
end

# source://dry-logic//lib/dry/logic/rule/interface.rb#7
Dry::Logic::Rule::Interface::SPLAT = T.let(T.unsafe(nil), Array)

# source://dry-logic//lib/dry/logic/rule/predicate.rb#7
class Dry::Logic::Rule::Predicate < ::Dry::Logic::Rule
  # source://dry-logic//lib/dry/logic/rule/predicate.rb#28
  def ast(input = T.unsafe(nil)); end

  # source://dry-logic//lib/dry/logic/rule/predicate.rb#16
  def name; end

  # source://dry-logic//lib/dry/logic/rule/predicate.rb#28
  def to_ast(input = T.unsafe(nil)); end

  # source://dry-logic//lib/dry/logic/rule/predicate.rb#20
  def to_s; end

  # source://dry-logic//lib/dry/logic/rule/predicate.rb#12
  def type; end

  class << self
    # source://dry-logic//lib/dry/logic/rule/predicate.rb#8
    def specialize(arity, curried, base = T.unsafe(nil)); end
  end
end

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::Rule::Self = T.let(T.unsafe(nil), Proc)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::Rule::Undefined = T.let(T.unsafe(nil), Object)

# source://dry-logic//lib/dry/logic/rule_compiler.rb#10
class Dry::Logic::RuleCompiler
  include ::Dry::Core::Constants

  # @return [RuleCompiler] a new instance of RuleCompiler
  #
  # source://dry-logic//lib/dry/logic/rule_compiler.rb#15
  def initialize(predicates); end

  # source://dry-logic//lib/dry/logic/rule_compiler.rb#19
  def call(ast); end

  # Returns the value of attribute predicates.
  #
  # source://dry-logic//lib/dry/logic/rule_compiler.rb#13
  def predicates; end

  # source://dry-logic//lib/dry/logic/rule_compiler.rb#23
  def visit(node); end

  # source://dry-logic//lib/dry/logic/rule_compiler.rb#67
  def visit_and(node); end

  # source://dry-logic//lib/dry/logic/rule_compiler.rb#42
  def visit_attr(node); end

  # source://dry-logic//lib/dry/logic/rule_compiler.rb#28
  def visit_check(node); end

  # source://dry-logic//lib/dry/logic/rule_compiler.rb#51
  def visit_each(node); end

  # source://dry-logic//lib/dry/logic/rule_compiler.rb#82
  def visit_implication(node); end

  # source://dry-logic//lib/dry/logic/rule_compiler.rb#37
  def visit_key(node); end

  # source://dry-logic//lib/dry/logic/rule_compiler.rb#33
  def visit_not(node); end

  # source://dry-logic//lib/dry/logic/rule_compiler.rb#72
  def visit_or(node); end

  # source://dry-logic//lib/dry/logic/rule_compiler.rb#55
  def visit_predicate(node); end

  # source://dry-logic//lib/dry/logic/rule_compiler.rb#47
  def visit_set(node); end

  # source://dry-logic//lib/dry/logic/rule_compiler.rb#77
  def visit_xor(node); end
end

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::RuleCompiler::EMPTY_ARRAY = T.let(T.unsafe(nil), Array)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::RuleCompiler::EMPTY_HASH = T.let(T.unsafe(nil), Hash)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::RuleCompiler::EMPTY_OPTS = T.let(T.unsafe(nil), Hash)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::RuleCompiler::EMPTY_SET = T.let(T.unsafe(nil), Set)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::RuleCompiler::EMPTY_STRING = T.let(T.unsafe(nil), String)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::RuleCompiler::IDENTITY = T.let(T.unsafe(nil), Proc)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::RuleCompiler::Self = T.let(T.unsafe(nil), Proc)

# source://dry-core/0.7.1/lib/dry/core/constants.rb#112
Dry::Logic::RuleCompiler::Undefined = T.let(T.unsafe(nil), Object)
