# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rails_event_store` gem.
# Please instead update this file by running `bin/tapioca gem rails_event_store`.

# source://rails_event_store//lib/rails_event_store/async_handler_helpers.rb#3
module RailsEventStore; end

# source://rails_event_store//lib/rails_event_store/active_job_scheduler.rb#6
class RailsEventStore::ActiveJobScheduler
  # @return [ActiveJobScheduler] a new instance of ActiveJobScheduler
  #
  # source://rails_event_store//lib/rails_event_store/active_job_scheduler.rb#7
  def initialize(serializer:); end

  # source://rails_event_store//lib/rails_event_store/active_job_scheduler.rb#11
  def call(klass, record); end

  # source://rails_event_store//lib/rails_event_store/active_job_scheduler.rb#15
  def verify(subscriber); end

  private

  # Returns the value of attribute serializer.
  #
  # source://rails_event_store//lib/rails_event_store/active_job_scheduler.rb#21
  def serializer; end
end

# source://rails_event_store//lib/rails_event_store/after_commit_async_dispatcher.rb#4
class RailsEventStore::AfterCommitAsyncDispatcher
  # @return [AfterCommitAsyncDispatcher] a new instance of AfterCommitAsyncDispatcher
  #
  # source://rails_event_store//lib/rails_event_store/after_commit_async_dispatcher.rb#5
  def initialize(scheduler:); end

  # source://rails_event_store//lib/rails_event_store/after_commit_async_dispatcher.rb#23
  def async_record(schedule_proc); end

  # source://rails_event_store//lib/rails_event_store/after_commit_async_dispatcher.rb#9
  def call(subscriber, _, record); end

  # source://rails_event_store//lib/rails_event_store/after_commit_async_dispatcher.rb#13
  def run(&schedule_proc); end

  # source://rails_event_store//lib/rails_event_store/after_commit_async_dispatcher.rb#27
  def verify(subscriber); end
end

# source://rails_event_store//lib/rails_event_store/after_commit_async_dispatcher.rb#31
class RailsEventStore::AfterCommitAsyncDispatcher::AsyncRecord
  # @return [AsyncRecord] a new instance of AsyncRecord
  #
  # source://rails_event_store//lib/rails_event_store/after_commit_async_dispatcher.rb#32
  def initialize(dispatcher, schedule_proc); end

  # source://rails_event_store//lib/rails_event_store/after_commit_async_dispatcher.rb#45
  def add_to_transaction; end

  # source://rails_event_store//lib/rails_event_store/after_commit_async_dispatcher.rb#43
  def before_committed!; end

  # source://rails_event_store//lib/rails_event_store/after_commit_async_dispatcher.rb#37
  def committed!(*_arg0); end

  # Returns the value of attribute dispatcher.
  #
  # source://rails_event_store//lib/rails_event_store/after_commit_async_dispatcher.rb#51
  def dispatcher; end

  # source://rails_event_store//lib/rails_event_store/after_commit_async_dispatcher.rb#41
  def rolledback!(*_arg0); end

  # Returns the value of attribute schedule_proc.
  #
  # source://rails_event_store//lib/rails_event_store/after_commit_async_dispatcher.rb#51
  def schedule_proc; end

  # @return [Boolean]
  #
  # source://rails_event_store//lib/rails_event_store/after_commit_async_dispatcher.rb#49
  def trigger_transactional_callbacks?; end
end

# source://rails_event_store//lib/rails_event_store/async_handler_helpers.rb#4
module RailsEventStore::AsyncHandler
  class << self
    # source://rails_event_store//lib/rails_event_store/async_handler_helpers.rb#22
    def prepended(host_class); end

    # source://rails_event_store//lib/rails_event_store/async_handler_helpers.rb#9
    def with(event_store: T.unsafe(nil), event_store_locator: T.unsafe(nil), serializer: T.unsafe(nil)); end

    # source://rails_event_store//lib/rails_event_store/async_handler_helpers.rb#5
    def with_defaults; end
  end
end

# source://rails_event_store//lib/rails_event_store/browser.rb#7
class RailsEventStore::Browser < ::Rails::Engine; end

# source://rails_event_store//lib/rails_event_store/client.rb#4
class RailsEventStore::Client < ::RubyEventStore::Client
  # @return [Client] a new instance of Client
  #
  # source://rails_event_store//lib/rails_event_store/client.rb#7
  def initialize(mapper: T.unsafe(nil), repository: T.unsafe(nil), subscriptions: T.unsafe(nil), dispatcher: T.unsafe(nil), clock: T.unsafe(nil), correlation_id_generator: T.unsafe(nil), request_metadata: T.unsafe(nil)); end

  # Returns the value of attribute request_metadata.
  #
  # source://rails_event_store//lib/rails_event_store/client.rb#5
  def request_metadata; end

  # source://rails_event_store//lib/rails_event_store/client.rb#32
  def with_request_metadata(env, &block); end

  private

  # source://rails_event_store//lib/rails_event_store/client.rb#38
  def default_request_metadata; end
end

# source://rails_event_store//lib/rails_event_store/all.rb#27
RailsEventStore::CorrelatedCommands = RubyEventStore::CorrelatedCommands

# source://rails_event_store//lib/rails_event_store/async_handler_helpers.rb#27
module RailsEventStore::CorrelatedHandler
  # source://rails_event_store//lib/rails_event_store/async_handler_helpers.rb#28
  def perform(event); end
end

# source://rails_event_store//lib/rails_event_store/all.rb#14
RailsEventStore::Event = RubyEventStore::Event

# source://rails_event_store//lib/rails_event_store/all.rb#21
RailsEventStore::EventNotFound = RubyEventStore::EventNotFound

# source://rails_event_store//lib/rails_event_store/all.rb#28
RailsEventStore::GLOBAL_STREAM = T.let(T.unsafe(nil), Object)

# source://rails_event_store//lib/rails_event_store/all.rb#30
RailsEventStore::ImmediateAsyncDispatcher = RubyEventStore::ImmediateAsyncDispatcher

# source://rails_event_store//lib/rails_event_store/all.rb#15
RailsEventStore::InMemoryRepository = RubyEventStore::InMemoryRepository

# source://rails_event_store//lib/rails_event_store/all.rb#20
RailsEventStore::IncorrectStreamData = RubyEventStore::IncorrectStreamData

# source://rails_event_store//lib/rails_event_store/all.rb#19
RailsEventStore::InvalidExpectedVersion = RubyEventStore::InvalidExpectedVersion

# source://rails_event_store//lib/rails_event_store/all.rb#23
RailsEventStore::InvalidHandler = RubyEventStore::InvalidHandler

# source://rails_event_store//lib/rails_event_store/all.rb#26
RailsEventStore::InvalidPageSize = RubyEventStore::InvalidPageSize

# source://rails_event_store//lib/rails_event_store/all.rb#24
RailsEventStore::InvalidPageStart = RubyEventStore::InvalidPageStart

# source://rails_event_store//lib/rails_event_store/all.rb#25
RailsEventStore::InvalidPageStop = RubyEventStore::InvalidPageStop

# source://rails_event_store//lib/rails_event_store/link_by_metadata.rb#16
class RailsEventStore::LinkByCausationId < ::RubyEventStore::LinkByCausationId
  # @return [LinkByCausationId] a new instance of LinkByCausationId
  #
  # source://rails_event_store//lib/rails_event_store/link_by_metadata.rb#17
  def initialize(event_store: T.unsafe(nil), prefix: T.unsafe(nil)); end
end

# source://rails_event_store//lib/rails_event_store/link_by_metadata.rb#10
class RailsEventStore::LinkByCorrelationId < ::RubyEventStore::LinkByCorrelationId
  # @return [LinkByCorrelationId] a new instance of LinkByCorrelationId
  #
  # source://rails_event_store//lib/rails_event_store/link_by_metadata.rb#11
  def initialize(event_store: T.unsafe(nil), prefix: T.unsafe(nil)); end
end

# source://rails_event_store//lib/rails_event_store/link_by_metadata.rb#22
class RailsEventStore::LinkByEventType < ::RubyEventStore::LinkByEventType
  # @return [LinkByEventType] a new instance of LinkByEventType
  #
  # source://rails_event_store//lib/rails_event_store/link_by_metadata.rb#23
  def initialize(event_store: T.unsafe(nil), prefix: T.unsafe(nil)); end
end

# source://rails_event_store//lib/rails_event_store/link_by_metadata.rb#4
class RailsEventStore::LinkByMetadata < ::RubyEventStore::LinkByMetadata
  # @return [LinkByMetadata] a new instance of LinkByMetadata
  #
  # source://rails_event_store//lib/rails_event_store/link_by_metadata.rb#5
  def initialize(key:, event_store: T.unsafe(nil), prefix: T.unsafe(nil)); end
end

# source://rails_event_store//lib/rails_event_store/middleware.rb#4
class RailsEventStore::Middleware
  # @return [Middleware] a new instance of Middleware
  #
  # source://rails_event_store//lib/rails_event_store/middleware.rb#5
  def initialize(app); end

  # source://rails_event_store//lib/rails_event_store/middleware.rb#9
  def call(env); end

  private

  # source://rails_event_store//lib/rails_event_store/middleware.rb#19
  def config; end
end

# source://rails_event_store//lib/rails_event_store/all.rb#29
RailsEventStore::PAGE_SIZE = T.let(T.unsafe(nil), Integer)

# source://rails_event_store//lib/rails_event_store/all.rb#17
RailsEventStore::Projection = RubyEventStore::Projection

# source://rails_event_store//lib/rails_event_store/railtie.rb#7
class RailsEventStore::Railtie < ::Rails::Railtie; end

# source://rails_event_store//lib/rails_event_store/all.rb#22
RailsEventStore::SubscriberNotExist = RubyEventStore::SubscriberNotExist

# source://rails_event_store//lib/rails_event_store/all.rb#16
RailsEventStore::Subscriptions = RubyEventStore::Subscriptions

# source://rails_event_store//lib/rails_event_store/version.rb#4
RailsEventStore::VERSION = T.let(T.unsafe(nil), String)

# source://rails_event_store//lib/rails_event_store/all.rb#18
RailsEventStore::WrongExpectedEventVersion = RubyEventStore::WrongExpectedEventVersion
