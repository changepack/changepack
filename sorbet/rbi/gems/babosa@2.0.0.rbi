# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `babosa` gem.
# Please instead update this file by running `bin/tapioca gem babosa`.

# source://babosa//lib/babosa.rb#3
module Babosa; end

# This class provides some string-manipulation methods specific to slugs.
#
# Note that this class includes many "bang methods" such as {#clean!} and
# {#normalize!} that perform actions on the string in-place. Each of these
# methods has a corresponding "bangless" method (i.e., +Identifier#clean!+
# and +Identifier#clean+) which does not appear in the documentation because
# it is generated dynamically.
#
# All of the bang methods return an instance of String, while the bangless
# versions return an instance of {Babosa::Identifier}, so that calls to methods
# specific to this class can be chained:
#
#   string = Identifier.new("hello world")
#   string.with_separators! # => "hello-world"
#   string.with_separators  # => <Babosa::Identifier:0x000001013e1590 @wrapped_string="hello-world">
#
# @see http://www.utf8-chartable.de/unicode-utf8-table.pl?utf8=dec Unicode character table
#
# source://babosa//lib/babosa/identifier.rb#21
class Babosa::Identifier
  # @param string [#to_s] The string to use as the basis of the Identifier.
  # @return [Identifier] a new instance of Identifier
  #
  # source://babosa//lib/babosa/identifier.rb#36
  def initialize(string); end

  # source://babosa//lib/babosa/identifier.rb#42
  def ==(other); end

  # source://babosa//lib/babosa/identifier.rb#232
  def approximate_ascii(*args); end

  # Approximate an ASCII string. This works only for strings using characters
  # that are Roman-alphabet characters + diacritics. Non-letter characters
  # are left unmodified.
  #
  #   string = Identifier.new "Łódź, Poland"
  #   string.transliterate                 # => "Lodz, Poland"
  #   string = Identifier.new "日本"
  #   string.transliterate                 # => "日本"
  #
  # You can pass the names of any transliterator class as arguments. This
  # allows for contextual approximations. Various languages are supported,
  # you can see which ones by looking at the source of
  # {Babosa::Transliterator::Base}.
  #
  #   string = Identifier.new "Jürgen Müller"
  #   string.transliterate                 # => "Jurgen Muller"
  #   string.transliterate :german         # => "Juergen Mueller"
  #   string = Identifier.new "¡Feliz año!"
  #   string.transliterate                 # => "¡Feliz ano!"
  #   string.transliterate :spanish        # => "¡Feliz anio!"
  #
  # The approximations are an array, which you can modify if you choose:
  #
  #   # Make Spanish use "nh" rather than "nn"
  #   Babosa::Transliterator::Spanish::APPROXIMATIONS["ñ"] = "nh"
  #
  # Notice that this method does not simply convert to ASCII; if you want
  # to remove non-ASCII characters such as "¡" and "¿", use {#to_ascii!}:
  #
  #   string.transliterate!(:spanish)       # => "¡Feliz anio!"
  #   string.to_ascii!                      # => "Feliz anio!"
  #
  # @param *args [Symbol]
  # @return String
  #
  # source://babosa//lib/babosa/identifier.rb#84
  def approximate_ascii!(*kinds); end

  # source://babosa//lib/babosa/identifier.rb#232
  def clean(*args); end

  # Converts dashes to spaces, removes leading and trailing spaces, and
  # replaces multiple whitespace characters with a single space.
  #
  # @return String
  #
  # source://babosa//lib/babosa/identifier.rb#98
  def clean!; end

  # The default options for {#normalize!}. Override to set your own defaults.
  #
  # source://babosa//lib/babosa/identifier.rb#247
  def default_normalize_options; end

  # source://babosa//lib/babosa/identifier.rb#232
  def downcase(*args); end

  # @return [Boolean]
  #
  # source://babosa//lib/babosa/identifier.rb#46
  def eql?(other); end

  # source://babosa//lib/babosa/identifier.rb#27
  def method_missing(symbol, *args, &block); end

  # source://babosa//lib/babosa/identifier.rb#232
  def normalize(*args); end

  # Normalize the string for use as a URL slug. Note that in this context,
  # +normalize+ means, strip, remove non-letters/numbers, downcasing,
  # truncating to 255 bytes and converting whitespace to dashes.
  #
  # @param options [Hash]
  # @return String
  #
  # source://babosa//lib/babosa/identifier.rb#123
  def normalize!(options = T.unsafe(nil)); end

  # source://babosa//lib/babosa/identifier.rb#232
  def normalize_utf8(*args); end

  # Perform Unicode composition on the wrapped string.
  #
  # @return String
  #
  # source://babosa//lib/babosa/identifier.rb#205
  def normalize_utf8!; end

  # source://babosa//lib/babosa/identifier.rb#232
  def strip_leading_digits(*args); end

  # Strip any leading digits.
  #
  # @return String
  #
  # source://babosa//lib/babosa/identifier.rb#213
  def strip_leading_digits!; end

  # source://babosa//lib/babosa/identifier.rb#232
  def tidy_bytes(*args); end

  # Attempt to convert characters encoded using CP1252 and IS0-8859-1 to
  # UTF-8.
  #
  # @return String
  #
  # source://babosa//lib/babosa/identifier.rb#221
  def tidy_bytes!; end

  # source://babosa//lib/babosa/identifier.rb#232
  def to_ascii(*args); end

  # Delete any non-ascii characters.
  #
  # @return String
  #
  # source://babosa//lib/babosa/identifier.rb#162
  def to_ascii!; end

  # source://babosa//lib/babosa/identifier.rb#242
  def to_identifier; end

  # source://babosa//lib/babosa/identifier.rb#238
  def to_ruby_method(allow_bangs: T.unsafe(nil)); end

  # Normalize a string so that it can safely be used as a Ruby method name.
  #
  # @param allow_bangs [Boolean]
  # @raise [Error]
  # @return String
  #
  # source://babosa//lib/babosa/identifier.rb#146
  def to_ruby_method!(allow_bangs: T.unsafe(nil)); end

  # Returns the value of attribute wrapped_string.
  #
  # source://babosa//lib/babosa/identifier.rb#24
  def to_s; end

  # source://babosa//lib/babosa/identifier.rb#242
  def to_slug; end

  # source://babosa//lib/babosa/identifier.rb#232
  def transliterate(*args); end

  # Approximate an ASCII string. This works only for strings using characters
  # that are Roman-alphabet characters + diacritics. Non-letter characters
  # are left unmodified.
  #
  #   string = Identifier.new "Łódź, Poland"
  #   string.transliterate                 # => "Lodz, Poland"
  #   string = Identifier.new "日本"
  #   string.transliterate                 # => "日本"
  #
  # You can pass the names of any transliterator class as arguments. This
  # allows for contextual approximations. Various languages are supported,
  # you can see which ones by looking at the source of
  # {Babosa::Transliterator::Base}.
  #
  #   string = Identifier.new "Jürgen Müller"
  #   string.transliterate                 # => "Jurgen Muller"
  #   string.transliterate :german         # => "Juergen Mueller"
  #   string = Identifier.new "¡Feliz año!"
  #   string.transliterate                 # => "¡Feliz ano!"
  #   string.transliterate :spanish        # => "¡Feliz anio!"
  #
  # The approximations are an array, which you can modify if you choose:
  #
  #   # Make Spanish use "nh" rather than "nn"
  #   Babosa::Transliterator::Spanish::APPROXIMATIONS["ñ"] = "nh"
  #
  # Notice that this method does not simply convert to ASCII; if you want
  # to remove non-ASCII characters such as "¡" and "¿", use {#to_ascii!}:
  #
  #   string.transliterate!(:spanish)       # => "¡Feliz anio!"
  #   string.to_ascii!                      # => "Feliz anio!"
  #
  # @param *args [Symbol]
  # @return String
  #
  # source://babosa//lib/babosa/identifier.rb#84
  def transliterate!(*kinds); end

  # source://babosa//lib/babosa/identifier.rb#232
  def truncate(*args); end

  # Truncate the string to +max+ characters.
  #
  # @example
  #   "üéøá".to_identifier.truncate(3) #=> "üéø"
  # @param max [Integer] The maximum number of characters.
  # @return String
  #
  # source://babosa//lib/babosa/identifier.rb#174
  def truncate!(max); end

  # source://babosa//lib/babosa/identifier.rb#232
  def truncate_bytes(*args); end

  # Truncate the string to +max+ bytes. This can be useful for ensuring that
  # a UTF-8 string will always fit into a database column with a certain max
  # byte length. The resulting string may be less than +max+ if the string must
  # be truncated at a multibyte character boundary.
  #
  # @example
  #   "üéøá".to_identifier.truncate_bytes(3) #=> "ü"
  # @param max [Integer] The maximum number of bytes.
  # @return String
  #
  # source://babosa//lib/babosa/identifier.rb#188
  def truncate_bytes!(max); end

  # source://babosa//lib/babosa/identifier.rb#232
  def upcase(*args); end

  # source://babosa//lib/babosa/identifier.rb#232
  def with_dashes(*args); end

  # Replaces whitespace with dashes ("-").
  #
  # @param char [String] the separator character to use.
  # @return String
  #
  # source://babosa//lib/babosa/identifier.rb#197
  def with_dashes!(char = T.unsafe(nil)); end

  # source://babosa//lib/babosa/identifier.rb#232
  def with_separators(*args); end

  # Replaces whitespace with dashes ("-").
  #
  # @param char [String] the separator character to use.
  # @return String
  #
  # source://babosa//lib/babosa/identifier.rb#197
  def with_separators!(char = T.unsafe(nil)); end

  # source://babosa//lib/babosa/identifier.rb#232
  def word_chars(*args); end

  # Remove any non-word characters. For this library's purposes, this means
  # anything other than letters, numbers, spaces, underscores, dashes,
  # newlines, and linefeeds.
  #
  # @return String
  #
  # source://babosa//lib/babosa/identifier.rb#109
  def word_chars!; end

  # Returns the value of attribute wrapped_string.
  #
  # source://babosa//lib/babosa/identifier.rb#24
  def wrapped_string; end

  private

  # @return [Boolean]
  #
  # source://babosa//lib/babosa/identifier.rb#31
  def respond_to_missing?(name, include_all); end

  # Used as the basis of the non-mutating (bangless) methods.
  #
  # source://babosa//lib/babosa/identifier.rb#260
  def with_new_instance; end
end

# source://babosa//lib/babosa/identifier.rb#22
class Babosa::Identifier::Error < ::StandardError; end

# source://babosa//lib/babosa/transliterator/base.rb#6
module Babosa::Transliterator
  class << self
    # source://babosa//lib/babosa/transliterator/base.rb#7
    def get(symbol); end
  end
end

# source://babosa//lib/babosa/transliterator/base.rb#12
class Babosa::Transliterator::Base
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # @return [Base] a new instance of Base
  #
  # source://babosa//lib/babosa/transliterator/base.rb#66
  def initialize; end

  # Accepts a single UTF-8 codepoint and returns the ASCII character code
  # used as the transliteration value.
  #
  # source://babosa//lib/babosa/transliterator/base.rb#83
  def [](codepoint); end

  # Returns the value of attribute approximations.
  #
  # source://babosa//lib/babosa/transliterator/base.rb#64
  def approximations; end

  # Transliterates a string.
  #
  # source://babosa//lib/babosa/transliterator/base.rb#88
  def transliterate(string); end
end

# source://babosa//lib/babosa/transliterator/base.rb#15
Babosa::Transliterator::Base::APPROXIMATIONS = T.let(T.unsafe(nil), Hash)

# source://babosa//lib/babosa/transliterator/bulgarian.rb#5
class Babosa::Transliterator::Bulgarian < ::Babosa::Transliterator::Cyrillic; end

# source://babosa//lib/babosa/transliterator/bulgarian.rb#6
Babosa::Transliterator::Bulgarian::APPROXIMATIONS = T.let(T.unsafe(nil), Hash)

# Approximations are based on GOST 7.79, System B:
# http://en.wikipedia.org/wiki/ISO_9#GOST_7.79
#
# source://babosa//lib/babosa/transliterator/cyrillic.rb#7
class Babosa::Transliterator::Cyrillic < ::Babosa::Transliterator::Base
  # source://babosa//lib/babosa/transliterator/cyrillic.rb#103
  def transliterate(string); end
end

# source://babosa//lib/babosa/transliterator/cyrillic.rb#8
Babosa::Transliterator::Cyrillic::APPROXIMATIONS = T.let(T.unsafe(nil), Hash)

# source://babosa//lib/babosa/transliterator/danish.rb#5
class Babosa::Transliterator::Danish < ::Babosa::Transliterator::Latin; end

# source://babosa//lib/babosa/transliterator/danish.rb#6
Babosa::Transliterator::Danish::APPROXIMATIONS = T.let(T.unsafe(nil), Hash)

# source://babosa//lib/babosa/transliterator/german.rb#5
class Babosa::Transliterator::German < ::Babosa::Transliterator::Latin; end

# source://babosa//lib/babosa/transliterator/german.rb#6
Babosa::Transliterator::German::APPROXIMATIONS = T.let(T.unsafe(nil), Hash)

# source://babosa//lib/babosa/transliterator/greek.rb#5
class Babosa::Transliterator::Greek < ::Babosa::Transliterator::Base; end

# source://babosa//lib/babosa/transliterator/greek.rb#6
Babosa::Transliterator::Greek::APPROXIMATIONS = T.let(T.unsafe(nil), Hash)

# source://babosa//lib/babosa/transliterator/hindi.rb#5
class Babosa::Transliterator::Hindi < ::Babosa::Transliterator::Base; end

# source://babosa//lib/babosa/transliterator/hindi.rb#6
Babosa::Transliterator::Hindi::APPROXIMATIONS = T.let(T.unsafe(nil), Hash)

# source://babosa//lib/babosa/transliterator/latin.rb#5
class Babosa::Transliterator::Latin < ::Babosa::Transliterator::Base; end

# source://babosa//lib/babosa/transliterator/latin.rb#6
Babosa::Transliterator::Latin::APPROXIMATIONS = T.let(T.unsafe(nil), Hash)

# source://babosa//lib/babosa/transliterator/macedonian.rb#5
class Babosa::Transliterator::Macedonian < ::Babosa::Transliterator::Cyrillic; end

# source://babosa//lib/babosa/transliterator/macedonian.rb#6
Babosa::Transliterator::Macedonian::APPROXIMATIONS = T.let(T.unsafe(nil), Hash)

# source://babosa//lib/babosa/transliterator/norwegian.rb#5
class Babosa::Transliterator::Norwegian < ::Babosa::Transliterator::Latin; end

# source://babosa//lib/babosa/transliterator/norwegian.rb#6
Babosa::Transliterator::Norwegian::APPROXIMATIONS = T.let(T.unsafe(nil), Hash)

# source://babosa//lib/babosa/transliterator/romanian.rb#5
class Babosa::Transliterator::Romanian < ::Babosa::Transliterator::Latin; end

# source://babosa//lib/babosa/transliterator/romanian.rb#6
Babosa::Transliterator::Romanian::APPROXIMATIONS = T.let(T.unsafe(nil), Hash)

# source://babosa//lib/babosa/transliterator/russian.rb#5
class Babosa::Transliterator::Russian < ::Babosa::Transliterator::Cyrillic; end

# source://babosa//lib/babosa/transliterator/russian.rb#6
Babosa::Transliterator::Russian::APPROXIMATIONS = T.let(T.unsafe(nil), Hash)

# source://babosa//lib/babosa/transliterator/serbian.rb#5
class Babosa::Transliterator::Serbian < ::Babosa::Transliterator::Latin; end

# source://babosa//lib/babosa/transliterator/serbian.rb#6
Babosa::Transliterator::Serbian::APPROXIMATIONS = T.let(T.unsafe(nil), Hash)

# source://babosa//lib/babosa/transliterator/spanish.rb#5
class Babosa::Transliterator::Spanish < ::Babosa::Transliterator::Latin; end

# source://babosa//lib/babosa/transliterator/spanish.rb#6
Babosa::Transliterator::Spanish::APPROXIMATIONS = T.let(T.unsafe(nil), Hash)

# source://babosa//lib/babosa/transliterator/swedish.rb#5
class Babosa::Transliterator::Swedish < ::Babosa::Transliterator::Latin; end

# source://babosa//lib/babosa/transliterator/swedish.rb#6
Babosa::Transliterator::Swedish::APPROXIMATIONS = T.let(T.unsafe(nil), Hash)

# source://babosa//lib/babosa/transliterator/turkish.rb#5
class Babosa::Transliterator::Turkish < ::Babosa::Transliterator::Latin; end

# source://babosa//lib/babosa/transliterator/ukrainian.rb#5
class Babosa::Transliterator::Ukrainian < ::Babosa::Transliterator::Cyrillic; end

# source://babosa//lib/babosa/transliterator/ukrainian.rb#6
Babosa::Transliterator::Ukrainian::APPROXIMATIONS = T.let(T.unsafe(nil), Hash)

# source://babosa//lib/babosa/transliterator/vietnamese.rb#5
class Babosa::Transliterator::Vietnamese < ::Babosa::Transliterator::Latin; end

# source://babosa//lib/babosa/transliterator/vietnamese.rb#6
Babosa::Transliterator::Vietnamese::APPROXIMATIONS = T.let(T.unsafe(nil), Hash)

# source://babosa//lib/babosa.rb#6
class String
  include ::Comparable

  # source://babosa//lib/babosa.rb#7
  def to_identifier; end

  # source://babosa//lib/babosa.rb#7
  def to_slug; end
end

# source://activesupport/7.0.4/lib/active_support/core_ext/object/blank.rb#104
String::BLANK_RE = T.let(T.unsafe(nil), Regexp)

# source://activesupport/7.0.4/lib/active_support/core_ext/object/blank.rb#105
String::ENCODED_BLANKS = T.let(T.unsafe(nil), Concurrent::Map)
