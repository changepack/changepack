# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `view_component` gem.
# Please instead update this file by running `bin/tapioca gem view_component`.

module PreviewHelper
  def find_template_data(lookup_context:, template_identifier:); end
  def preview_source; end

  private

  def prism_language_name_by_template(template:); end
  def prism_language_name_by_template_path(template_file_path:); end
end

PreviewHelper::AVAILABLE_PRISM_LANGUAGES = T.let(T.unsafe(nil), Array)
PreviewHelper::FALLBACK_LANGUAGE = T.let(T.unsafe(nil), String)

# source://view_component//lib/view_component.rb#6
module ViewComponent
  extend ::ActiveSupport::Autoload
end

# source://view_component//lib/view_component/base.rb#16
class ViewComponent::Base < ::ActionView::Base
  include ::ActiveSupport::Configurable
  include ::ViewComponent::ContentAreas
  include ::ViewComponent::Previewable
  include ::ViewComponent::SlotableV2
  include ::ViewComponent::Translatable
  include ::ViewComponent::WithContentHelper
  extend ::ActiveSupport::Configurable::ClassMethods
  extend ::ViewComponent::ContentAreas::ClassMethods
  extend ::ViewComponent::SlotableV2::ClassMethods
  extend ::ViewComponent::Translatable::ClassMethods

  # @private
  # @return [Base] a new instance of Base
  #
  # source://view_component//lib/view_component/base.rb#190
  def initialize(*_arg0); end

  # Returns the value of attribute __vc_original_view_context.
  #
  # source://view_component//lib/view_component/base.rb#34
  def __vc_original_view_context; end

  # Sets the attribute __vc_original_view_context
  #
  # @param value the value to set the attribute __vc_original_view_context to.
  #
  # source://view_component//lib/view_component/base.rb#34
  def __vc_original_view_context=(_arg0); end

  # EXPERIMENTAL: Optional content to be returned after the rendered template.
  #
  # @return [String]
  #
  # source://view_component//lib/view_component/base.rb#162
  def _output_postamble; end

  # Called before rendering the component. Override to perform operations that
  # depend on having access to the view context, such as helpers.
  #
  # @return [void]
  #
  # source://view_component//lib/view_component/base.rb#170
  def before_render; end

  # Called after rendering the component.
  #
  # @deprecated Use `#before_render` instead. Will be removed in v3.0.0.
  # @return [void]
  #
  # source://view_component//lib/view_component/base.rb#178
  def before_render_check; end

  # source://view_component//lib/view_component/base.rb#347
  def component_parent_class; end

  # source://view_component//lib/view_component/base.rb#29
  def config(*_arg0, **_arg1, &_arg2); end

  # source://view_component//lib/view_component/base.rb#31
  def content_areas; end

  # source://view_component//lib/view_component/base.rb#31
  def content_areas=(_arg0); end

  # source://view_component//lib/view_component/base.rb#31
  def content_areas?; end

  # The current controller. Use sparingly as doing so introduces coupling
  # that inhibits encapsulation & reuse, often making testing difficult.
  #
  # @return [ActionController::Base]
  #
  # source://view_component//lib/view_component/base.rb#212
  def controller; end

  # source://view_component//lib/view_component/previewable.rb#30
  def default_preview_layout; end

  # source://view_component//lib/view_component/base.rb#29
  def form_authenticity_token(*_arg0, **_arg1, &_arg2); end

  # For caching, such as #cache_if
  #
  # @private
  #
  # source://view_component//lib/view_component/base.rb#269
  def format; end

  # source://view_component//lib/view_component/base.rb#388
  def generate; end

  # A proxy through which to access helpers. Use sparingly as doing so introduces
  # coupling that inhibits encapsulation & reuse, often making testing difficult.
  #
  # @return [ActionView::Base]
  #
  # source://view_component//lib/view_component/base.rb#231
  def helpers; end

  # source://view_component//lib/view_component/translatable.rb#15
  def i18n_backend; end

  # @private
  #
  # source://view_component//lib/view_component/base.rb#131
  def perform_render; end

  # source://view_component//lib/view_component/previewable.rb#57
  def preview_controller; end

  # source://view_component//lib/view_component/previewable.rb#39
  def preview_path; end

  # source://view_component//lib/view_component/previewable.rb#36
  def preview_paths; end

  # source://view_component//lib/view_component/previewable.rb#47
  def preview_route; end

  # source://view_component//lib/view_component/base.rb#29
  def protect_against_forgery?(*_arg0, **_arg1, &_arg2); end

  # source://view_component//lib/view_component/slotable_v2.rb#18
  def registered_slots; end

  # source://view_component//lib/view_component/slotable_v2.rb#18
  def registered_slots=(_arg0); end

  # source://view_component//lib/view_component/slotable_v2.rb#18
  def registered_slots?; end

  # Re-use original view_context if we're not rendering a component.
  #
  # This prevents an exception when rendering a partial inside of a component that has also been rendered outside
  # of the component. This is due to the partials compiled template method existing in the parent `view_context`,
  #  and not the component's `view_context`.
  #
  # @private
  #
  # source://view_component//lib/view_component/base.rb#199
  def render(options = T.unsafe(nil), args = T.unsafe(nil), &block); end

  # Override to determine whether the ViewComponent should render.
  #
  # @return [Boolean]
  #
  # source://view_component//lib/view_component/base.rb#185
  def render?; end

  # Entrypoint for rendering components.
  #
  # - `view_context`: ActionView context from calling view
  # - `block`: optional block to be captured within the view context
  #
  # Returns HTML that has been escaped by the respective template handler.
  #
  # @return [String]
  #
  # source://view_component//lib/view_component/base.rb#83
  def render_in(view_context, &block); end

  # source://view_component//lib/view_component/base.rb#330
  def render_monkey_patch_enabled; end

  # Subclass components that call `super` inside their template code will cause a
  # double render if they emit the result:
  #
  #     <%= super %> # double-renders
  #     <% super %> # does not double-render
  #
  # Calls `super`, returning `nil` to avoid rendering the result twice.
  #
  # source://view_component//lib/view_component/base.rb#142
  def render_parent; end

  # :nocov:
  #
  # @private
  #
  # source://view_component//lib/view_component/base.rb#150
  def render_template_for(variant = T.unsafe(nil)); end

  # The current request. Use sparingly as doing so introduces coupling that
  # inhibits encapsulation & reuse, often making testing difficult.
  #
  # @return [ActionDispatch::Request]
  #
  # source://view_component//lib/view_component/base.rb#292
  def request; end

  # Components render in their own view context. Helpers and other functionality
  # require a reference to the original Rails view context, an instance of
  # `ActionView::Base`. Use this method to set a reference to the original
  # view context. Objects that implement this method will render in the component's
  # view context, while objects that don't will render in the original view context
  # so helpers, etc work as expected.
  #
  # @param view_context [ActionView::Base] The original view context.
  # @return [void]
  #
  # source://view_component//lib/view_component/base.rb#45
  def set_original_view_context(view_context); end

  # source://view_component//lib/view_component/previewable.rb#16
  def show_previews; end

  # source://view_component//lib/view_component/previewable.rb#24
  def show_previews_source; end

  # source://view_component//lib/view_component/base.rb#323
  def test_controller; end

  # source://view_component//lib/view_component/base.rb#323
  def test_controller=(val); end

  # For caching, such as #cache_if
  #
  # @private
  #
  # source://view_component//lib/view_component/base.rb#262
  def view_cache_dependencies; end

  # source://view_component//lib/view_component/base.rb#338
  def view_component_path; end

  # Exposes .virtual_path as an instance method
  #
  # @private
  #
  # source://view_component//lib/view_component/base.rb#256
  def virtual_path; end

  # Use the provided variant instead of the one determined by the current request.
  #
  # @deprecated Will be removed in v3.0.0.
  # @param variant [Symbol] The variant to be used by the component.
  # @return [self]
  #
  # source://activesupport/7.0.4/lib/active_support/deprecation/method_wrappers.rb#63
  def with_variant(*args, **_arg1, &block); end

  private

  # source://view_component//lib/view_component/base.rb#300
  def content; end

  # @return [Boolean]
  #
  # source://view_component//lib/view_component/base.rb#312
  def content_evaluated?; end

  # Returns the value of attribute view_context.
  #
  # source://view_component//lib/view_component/base.rb#298
  def view_context; end

  class << self
    # EXPERIMENTAL: This API is experimental and may be removed at any time.
    # Hook for allowing components to do work as part of the compilation process.
    #
    # For example, one might compile component-specific assets at this point.
    #
    # @private TODO: add documentation
    #
    # source://view_component//lib/view_component/base.rb#54
    def _after_compile; end

    # source://view_component//lib/view_component/base.rb#61
    def _deprecated_generate_mattr_accessor(name); end

    # EXPERIMENTAL: This API is experimental and may be removed at any time.
    # Find sidecar files for the given extensions.
    #
    # The provided array of extensions is expected to contain
    # strings starting without the "dot", example: `["erb", "haml"]`.
    #
    # For example, one might collect sidecar CSS files that need to be compiled.
    #
    # @private TODO: add documentation
    #
    # source://view_component//lib/view_component/base.rb#402
    def _sidecar_files(extensions); end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#597
    def collection_counter_parameter; end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#607
    def collection_iteration_parameter; end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#588
    def collection_parameter; end

    # Compile templates to instance methods, assuming they haven't been compiled already.
    #
    # Do as much work as possible in this step, as doing so reduces the amount
    # of work done each time a component is rendered.
    #
    # @private
    #
    # source://view_component//lib/view_component/base.rb#508
    def compile(raise_errors: T.unsafe(nil), force: T.unsafe(nil)); end

    # @private
    # @return [Boolean]
    #
    # source://view_component//lib/view_component/base.rb#499
    def compiled?; end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#513
    def compiler; end

    # source://view_component//lib/view_component/base.rb#347
    def component_parent_class; end

    # source://view_component//lib/view_component/base.rb#347
    def component_parent_class=(val); end

    # source://view_component//lib/view_component/base.rb#31
    def content_areas; end

    # source://view_component//lib/view_component/base.rb#31
    def content_areas=(value); end

    # source://view_component//lib/view_component/base.rb#31
    def content_areas?; end

    # @private
    # @return [Boolean]
    #
    # source://view_component//lib/view_component/base.rb#602
    def counter_argument_present?; end

    # source://view_component//lib/view_component/previewable.rb#30
    def default_preview_layout; end

    # source://view_component//lib/view_component/previewable.rb#30
    def default_preview_layout=(val); end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#524
    def format; end

    # source://view_component//lib/view_component/base.rb#388
    def generate; end

    # source://view_component//lib/view_component/base.rb#388
    def generate=(val); end

    # source://view_component//lib/view_component/base.rb#62
    def generate_distinct_locale_files; end

    # source://view_component//lib/view_component/base.rb#65
    def generate_distinct_locale_files=(value); end

    # source://view_component//lib/view_component/base.rb#62
    def generate_locale; end

    # source://view_component//lib/view_component/base.rb#65
    def generate_locale=(value); end

    # source://view_component//lib/view_component/base.rb#62
    def generate_sidecar; end

    # source://view_component//lib/view_component/base.rb#65
    def generate_sidecar=(value); end

    # source://view_component//lib/view_component/base.rb#62
    def generate_stimulus_controller; end

    # source://view_component//lib/view_component/base.rb#65
    def generate_stimulus_controller=(value); end

    # source://view_component//lib/view_component/translatable.rb#15
    def i18n_backend; end

    # source://view_component//lib/view_component/translatable.rb#15
    def i18n_backend=(value); end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#529
    def identifier; end

    # @private
    # @private
    #
    # source://view_component//lib/view_component/base.rb#455
    def inherited(child); end

    # @private
    # @return [Boolean]
    #
    # source://view_component//lib/view_component/base.rb#612
    def iteration_argument_present?; end

    # source://view_component//lib/view_component/previewable.rb#57
    def preview_controller; end

    # source://view_component//lib/view_component/previewable.rb#57
    def preview_controller=(val); end

    # source://view_component//lib/view_component/previewable.rb#39
    def preview_path; end

    # source://view_component//lib/view_component/previewable.rb#39
    def preview_path=(val); end

    # source://view_component//lib/view_component/previewable.rb#36
    def preview_paths; end

    # source://view_component//lib/view_component/previewable.rb#36
    def preview_paths=(val); end

    # source://view_component//lib/view_component/previewable.rb#47
    def preview_route; end

    # source://view_component//lib/view_component/previewable.rb#47
    def preview_route=(val); end

    # source://view_component//lib/view_component/slotable_v2.rb#18
    def registered_slots; end

    # source://view_component//lib/view_component/slotable_v2.rb#18
    def registered_slots=(value); end

    # source://view_component//lib/view_component/slotable_v2.rb#18
    def registered_slots?; end

    # source://view_component//lib/view_component/base.rb#330
    def render_monkey_patch_enabled; end

    # source://view_component//lib/view_component/base.rb#330
    def render_monkey_patch_enabled=(val); end

    # Provide identifier for ActionView template annotations
    #
    # @private
    #
    # source://view_component//lib/view_component/base.rb#450
    def short_identifier; end

    # source://view_component//lib/view_component/previewable.rb#16
    def show_previews; end

    # source://view_component//lib/view_component/previewable.rb#16
    def show_previews=(val); end

    # source://view_component//lib/view_component/previewable.rb#24
    def show_previews_source; end

    # source://view_component//lib/view_component/previewable.rb#24
    def show_previews_source=(val); end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#392
    def source_location; end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#392
    def source_location=(_arg0); end

    # source://view_component//lib/view_component/base.rb#323
    def test_controller; end

    # source://view_component//lib/view_component/base.rb#323
    def test_controller=(val); end

    # we'll eventually want to update this to support other types
    #
    # @private
    #
    # source://view_component//lib/view_component/base.rb#519
    def type; end

    # Ensure the component initializer accepts the
    # collection parameter. By default, we don't
    # validate that the default parameter name
    # is accepted, as support for collection
    # rendering is optional.
    #
    # @private TODO: add documentation
    # @raise [ArgumentError]
    #
    # source://view_component//lib/view_component/base.rb#548
    def validate_collection_parameter!(validate_default: T.unsafe(nil)); end

    # Ensure the component initializer doesn't define
    # invalid parameters that could override the framework's
    # methods.
    #
    # @private TODO: add documentation
    # @raise [ViewComponent::ComponentError]
    #
    # source://view_component//lib/view_component/base.rb#578
    def validate_initialization_parameters!; end

    # source://view_component//lib/view_component/base.rb#338
    def view_component_path; end

    # source://view_component//lib/view_component/base.rb#338
    def view_component_path=(val); end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#392
    def virtual_path; end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#392
    def virtual_path=(_arg0); end

    # Render a component for each element in a collection ([documentation](/guide/collections)):
    #
    #     render(ProductsComponent.with_collection(@products, foo: :bar))
    #
    # @param collection [Enumerable] A list of items to pass the ViewComponent one at a time.
    # @param args [Arguments] Arguments to pass to the ViewComponent every time.
    #
    # source://view_component//lib/view_component/base.rb#443
    def with_collection(collection, **args); end

    # Set the parameter name used when rendering elements of a collection ([documentation](/guide/collections)):
    #
    #     with_collection_parameter :item
    #
    # @param parameter [Symbol] The parameter name used when rendering elements of a collection.
    #
    # source://view_component//lib/view_component/base.rb#538
    def with_collection_parameter(parameter); end

    private

    # source://view_component//lib/view_component/base.rb#618
    def initialize_parameter_names; end

    # source://view_component//lib/view_component/base.rb#626
    def initialize_parameters; end

    # source://view_component//lib/view_component/base.rb#630
    def provided_collection_parameter; end
  end
end

# source://view_component//lib/view_component/base.rb#26
ViewComponent::Base::RESERVED_PARAMETER = T.let(T.unsafe(nil), Symbol)

# source://view_component//lib/view_component/base.rb#24
class ViewComponent::Base::ViewContextCalledBeforeRenderError < ::StandardError; end

# source://view_component//lib/view_component/collection.rb#6
class ViewComponent::Collection
  include ::Enumerable

  # @return [Collection] a new instance of Collection
  #
  # source://view_component//lib/view_component/collection.rb#46
  def initialize(component, object, **options); end

  # Returns the value of attribute __vc_original_view_context.
  #
  # source://view_component//lib/view_component/collection.rb#13
  def __vc_original_view_context; end

  # Sets the attribute __vc_original_view_context
  #
  # @param value the value to set the attribute __vc_original_view_context to.
  #
  # source://view_component//lib/view_component/collection.rb#13
  def __vc_original_view_context=(_arg0); end

  # Returns the value of attribute component.
  #
  # source://view_component//lib/view_component/collection.rb#8
  def component; end

  # source://view_component//lib/view_component/collection.rb#26
  def components; end

  # source://view_component//lib/view_component/collection.rb#40
  def each(&block); end

  # source://view_component//lib/view_component/collection.rb#10
  def format(*_arg0, **_arg1, &_arg2); end

  # source://view_component//lib/view_component/collection.rb#19
  def render_in(view_context, &block); end

  # source://view_component//lib/view_component/collection.rb#15
  def set_original_view_context(view_context); end

  # source://view_component//lib/view_component/collection.rb#11
  def size(*_arg0, **_arg1, &_arg2); end

  private

  # source://view_component//lib/view_component/collection.rb#52
  def collection_variable(object); end

  # source://view_component//lib/view_component/collection.rb#63
  def component_options(item, iterator); end
end

# Keeps track of which templates have already been compiled
# This isn't part of the public API
#
# source://view_component//lib/view_component/compile_cache.rb#6
module ViewComponent::CompileCache
  private

  # source://view_component//lib/view_component/compile_cache.rb#17
  def compiled?(klass); end

  # source://view_component//lib/view_component/compile_cache.rb#26
  def invalidate!; end

  # source://view_component//lib/view_component/compile_cache.rb#21
  def invalidate_class!(klass); end

  # source://view_component//lib/view_component/compile_cache.rb#13
  def register(klass); end

  class << self
    # source://view_component//lib/view_component/compile_cache.rb#7
    def cache; end

    # source://view_component//lib/view_component/compile_cache.rb#7
    def cache=(val); end

    # @return [Boolean]
    #
    # source://view_component//lib/view_component/compile_cache.rb#17
    def compiled?(klass); end

    # source://view_component//lib/view_component/compile_cache.rb#26
    def invalidate!; end

    # source://view_component//lib/view_component/compile_cache.rb#21
    def invalidate_class!(klass); end

    # source://view_component//lib/view_component/compile_cache.rb#13
    def register(klass); end
  end
end

# source://view_component//lib/view_component/compiler.rb#4
class ViewComponent::Compiler
  # @return [Compiler] a new instance of Compiler
  #
  # source://view_component//lib/view_component/compiler.rb#17
  def initialize(component_class); end

  # Lock required to be obtained before compiling the component
  #
  # source://view_component//lib/view_component/compiler.rb#6
  def __vc_compiler_lock; end

  # source://view_component//lib/view_component/compiler.rb#30
  def compile(raise_errors: T.unsafe(nil), force: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://view_component//lib/view_component/compiler.rb#22
  def compiled?; end

  # @return [Boolean]
  #
  # source://view_component//lib/view_component/compiler.rb#26
  def development?; end

  # source://view_component//lib/view_component/compiler.rb#15
  def mode; end

  # source://view_component//lib/view_component/compiler.rb#15
  def mode=(_arg0); end

  # source://view_component//lib/view_component/compiler.rb#15
  def mode?; end

  # source://view_component//lib/view_component/compiler.rb#95
  def reset_render_template_for; end

  # source://view_component//lib/view_component/compiler.rb#87
  def with_lock(&block); end

  private

  # source://view_component//lib/view_component/compiler.rb#255
  def call_method_name(variant); end

  # source://view_component//lib/view_component/compiler.rb#238
  def compiled_template(file_path); end

  # Returns the value of attribute component_class.
  #
  # source://view_component//lib/view_component/compiler.rb#103
  def component_class; end

  # source://view_component//lib/view_component/compiler.rb#105
  def define_render_template_for; end

  # source://view_component//lib/view_component/compiler.rb#207
  def inline_calls; end

  # source://view_component//lib/view_component/compiler.rb#222
  def inline_calls_defined_on_self; end

  # source://view_component//lib/view_component/compiler.rb#138
  def template_errors; end

  # source://view_component//lib/view_component/compiler.rb#191
  def templates; end

  # source://view_component//lib/view_component/compiler.rb#226
  def variants; end

  # source://view_component//lib/view_component/compiler.rb#232
  def variants_from_inline_calls(calls); end

  class << self
    # source://view_component//lib/view_component/compiler.rb#15
    def mode; end

    # source://view_component//lib/view_component/compiler.rb#15
    def mode=(value); end

    # source://view_component//lib/view_component/compiler.rb#15
    def mode?; end
  end
end

# Compiler mode. Can be either:
# * development (a blocking mode which ensures thread safety when redefining the `call` method for components,
#                default in Rails development and test mode)
# * production (a non-blocking mode, default in Rails production mode)
#
# source://view_component//lib/view_component/compiler.rb#12
ViewComponent::Compiler::DEVELOPMENT_MODE = T.let(T.unsafe(nil), Symbol)

# source://view_component//lib/view_component/compiler.rb#13
ViewComponent::Compiler::PRODUCTION_MODE = T.let(T.unsafe(nil), Symbol)

# source://view_component//lib/view_component/component_error.rb#4
class ViewComponent::ComponentError < ::StandardError; end

# source://view_component//lib/view_component/content_areas.rb#9
module ViewComponent::ContentAreas
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ViewComponent::ContentAreas::ClassMethods

  # Assign the provided content to the content area accessor
  #
  # @private
  #
  # source://view_component//lib/view_component/content_areas.rb#15
  def with(area, content = T.unsafe(nil), &block); end
end

# source://view_component//lib/view_component/content_areas.rb#0
module ViewComponent::ContentAreas::ClassMethods
  # source://view_component//lib/view_component/content_areas.rb#33
  def with_content_areas(*areas); end
end

# source://view_component//lib/view_component/deprecation.rb#6
ViewComponent::DEPRECATION_HORIZON = T.let(T.unsafe(nil), Integer)

# source://view_component//lib/view_component/deprecation.rb#7
ViewComponent::Deprecation = T.let(T.unsafe(nil), ActiveSupport::Deprecation)

# source://view_component//lib/view_component/engine.rb#6
class ViewComponent::Engine < ::Rails::Engine; end

# source://view_component//lib/view_component/global_output_buffer.rb#4
module ViewComponent::GlobalOutputBuffer
  # source://view_component//lib/view_component/global_output_buffer.rb#30
  def output_buffer=(other_buffer); end

  # source://view_component//lib/view_component/global_output_buffer.rb#17
  def perform_render; end

  # source://view_component//lib/view_component/global_output_buffer.rb#5
  def render_in(view_context, &block); end

  # source://view_component//lib/view_component/global_output_buffer.rb#34
  def with_output_buffer(buf = T.unsafe(nil)); end
end

# source://view_component//lib/view_component/global_output_buffer.rb#56
module ViewComponent::GlobalOutputBuffer::ActionViewMods
  # source://view_component//lib/view_component/global_output_buffer.rb#57
  def output_buffer=(other_buffer); end

  # source://view_component//lib/view_component/global_output_buffer.rb#65
  def with_output_buffer(buf = T.unsafe(nil)); end
end

# source://view_component//lib/view_component/instrumentation.rb#6
module ViewComponent::Instrumentation
  # source://view_component//lib/view_component/instrumentation.rb#11
  def render_in(view_context, &block); end

  class << self
    # @private
    #
    # source://view_component//lib/view_component/instrumentation.rb#7
    def included(mod); end
  end
end

# source://view_component//lib/view_component/output_buffer_stack.rb#4
class ViewComponent::OutputBufferStack
  # @return [OutputBufferStack] a new instance of OutputBufferStack
  #
  # source://view_component//lib/view_component/output_buffer_stack.rb#14
  def initialize(initial_buffer = T.unsafe(nil)); end

  # source://view_component//lib/view_component/output_buffer_stack.rb#31
  def append=(arg); end

  # Returns the value of attribute buffer_stack.
  #
  # source://view_component//lib/view_component/output_buffer_stack.rb#8
  def buffer_stack; end

  # source://view_component//lib/view_component/output_buffer_stack.rb#61
  def current; end

  # source://view_component//lib/view_component/output_buffer_stack.rb#6
  def html_safe?(*_arg0, **_arg1, &_arg2); end

  # source://view_component//lib/view_component/output_buffer_stack.rb#45
  def length; end

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/delegation.rb#302
  def method_missing(method, *args, **_arg2, &block); end

  # source://view_component//lib/view_component/output_buffer_stack.rb#55
  def pop; end

  # source://view_component//lib/view_component/output_buffer_stack.rb#6
  def presence(*_arg0, **_arg1, &_arg2); end

  # source://view_component//lib/view_component/output_buffer_stack.rb#6
  def present?(*_arg0, **_arg1, &_arg2); end

  # source://view_component//lib/view_component/output_buffer_stack.rb#49
  def push(buffer = T.unsafe(nil)); end

  # source://view_component//lib/view_component/output_buffer_stack.rb#24
  def replace(buffer); end

  # source://view_component//lib/view_component/output_buffer_stack.rb#35
  def safe_append=(arg); end

  # source://view_component//lib/view_component/output_buffer_stack.rb#39
  def safe_concat(arg); end

  # source://view_component//lib/view_component/output_buffer_stack.rb#61
  def to_s; end

  private

  # source://activesupport/7.0.4/lib/active_support/core_ext/module/delegation.rb#294
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end

  class << self
    # source://view_component//lib/view_component/output_buffer_stack.rb#10
    def make_frame(*args); end
  end
end

# source://view_component//lib/view_component/polymorphic_slots.rb#4
module ViewComponent::PolymorphicSlots
  include ::ViewComponent::PolymorphicSlots::InstanceMethods

  mixes_in_class_methods ::ViewComponent::PolymorphicSlots::ClassMethods

  class << self
    # In older rails versions, using a concern isn't a good idea here because they appear to not work with
    # Module#prepend and class methods.
    #
    # source://view_component//lib/view_component/polymorphic_slots.rb#7
    def included(base); end
  end
end

# source://view_component//lib/view_component/polymorphic_slots.rb#12
module ViewComponent::PolymorphicSlots::ClassMethods
  # source://view_component//lib/view_component/polymorphic_slots.rb#27
  def register_polymorphic_slot(slot_name, types, collection:); end

  # source://view_component//lib/view_component/polymorphic_slots.rb#20
  def renders_many(slot_name, callable = T.unsafe(nil)); end

  # source://view_component//lib/view_component/polymorphic_slots.rb#13
  def renders_one(slot_name, callable = T.unsafe(nil)); end
end

# source://view_component//lib/view_component/polymorphic_slots.rb#67
module ViewComponent::PolymorphicSlots::InstanceMethods
  # source://view_component//lib/view_component/polymorphic_slots.rb#68
  def set_polymorphic_slot(slot_name, poly_type = T.unsafe(nil), *args, **_arg3, &block); end
end

# source://view_component//lib/view_component/preview.rb#6
class ViewComponent::Preview
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::AssetTagHelper
  extend ::ActiveSupport::DescendantsTracker

  # source://view_component//lib/view_component/preview.rb#11
  def render(component, **args, &block); end

  # source://view_component//lib/view_component/preview.rb#11
  def render_component(component, **args, &block); end

  # source://view_component//lib/view_component/preview.rb#21
  def render_with_template(template: T.unsafe(nil), locals: T.unsafe(nil)); end

  class << self
    # Returns all component preview classes.
    #
    # source://view_component//lib/view_component/preview.rb#32
    def all; end

    # Returns all of the available examples for the component preview.
    #
    # source://view_component//lib/view_component/preview.rb#50
    def examples; end

    # Returns +true+ if the preview exists.
    #
    # @return [Boolean]
    #
    # source://view_component//lib/view_component/preview.rb#55
    def exists?(preview); end

    # Find a component preview by its underscored class name.
    #
    # source://view_component//lib/view_component/preview.rb#60
    def find(preview); end

    # Setter for layout name.
    #
    # source://view_component//lib/view_component/preview.rb#70
    def layout(layout_name); end

    # source://view_component//lib/view_component/preview.rb#102
    def load_previews; end

    # Returns the relative path (from preview_path) to the preview example template if the template exists
    #
    # source://view_component//lib/view_component/preview.rb#75
    def preview_example_template_path(example); end

    # Returns the underscored name of the component preview without the suffix.
    #
    # source://view_component//lib/view_component/preview.rb#65
    def preview_name; end

    # Returns the method body for the example from the preview file.
    #
    # source://view_component//lib/view_component/preview.rb#97
    def preview_source(example); end

    # Returns the arguments for rendering of the component in its layout
    #
    # source://view_component//lib/view_component/preview.rb#39
    def render_args(example, params: T.unsafe(nil)); end

    private

    # source://view_component//lib/view_component/preview.rb#110
    def preview_paths; end
  end
end

module ViewComponent::PreviewActions
  extend ::ActiveSupport::Concern

  def index; end
  def previews; end

  private

  def default_preview_layout; end
  def determine_layout(layout_override = T.unsafe(nil), prepend_views: T.unsafe(nil)); end
  def find_preview; end
  def prepend_application_view_paths; end
  def prepend_preview_examples_view_path; end
  def set_locale; end
  def show_previews?; end
end

# source://view_component//lib/view_component/preview_template_error.rb#4
class ViewComponent::PreviewTemplateError < ::StandardError; end

# source://view_component//lib/view_component/previewable.rb#6
module ViewComponent::Previewable
  extend ::ActiveSupport::Concern
end

# source://view_component//lib/view_component/render_preview_helper.rb#4
module ViewComponent::RenderPreviewHelper
  # Render a preview inline. Internally sets `page` to be a `Capybara::Node::Simple`,
  # allowing for Capybara assertions to be used:
  #
  # ```ruby
  # render_preview(:default)
  # assert_text("Hello, World!")
  # ```
  #
  # Note: `#rendered_preview` expects a preview to be defined with the same class
  # name as the calling test, but with `Test` replaced with `Preview`:
  #
  # MyComponentTest -> MyComponentPreview etc.
  #
  # @param preview [String] The name of the preview to be rendered.
  # @return [Nokogiri::HTML]
  #
  # source://view_component//lib/view_component/render_preview_helper.rb#20
  def render_preview(name); end
end

# source://view_component//lib/view_component/slot.rb#4
class ViewComponent::Slot
  # Returns the value of attribute content.
  #
  # source://view_component//lib/view_component/slot.rb#5
  def content; end

  # Sets the attribute content
  #
  # @param value the value to set the attribute content to.
  #
  # source://view_component//lib/view_component/slot.rb#5
  def content=(_arg0); end
end

# source://view_component//lib/view_component/slot_v2.rb#6
class ViewComponent::SlotV2
  include ::ViewComponent::WithContentHelper

  # @return [SlotV2] a new instance of SlotV2
  #
  # source://view_component//lib/view_component/slot_v2.rb#11
  def initialize(parent); end

  # Sets the attribute __vc_component_instance
  #
  # @param value the value to set the attribute __vc_component_instance to.
  #
  # source://view_component//lib/view_component/slot_v2.rb#9
  def __vc_component_instance=(_arg0); end

  # Sets the attribute __vc_content
  #
  # @param value the value to set the attribute __vc_content to.
  #
  # source://view_component//lib/view_component/slot_v2.rb#9
  def __vc_content=(_arg0); end

  # Sets the attribute __vc_content_block
  #
  # @param value the value to set the attribute __vc_content_block to.
  #
  # source://view_component//lib/view_component/slot_v2.rb#9
  def __vc_content_block=(_arg0); end

  # @return [Boolean]
  #
  # source://view_component//lib/view_component/slot_v2.rb#90
  def html_safe?; end

  # Allow access to public component methods via the wrapper
  #
  # for example
  #
  # calling `header.name` (where `header` is a slot) will call `name`
  # on the `HeaderComponent` instance.
  #
  # Where the component may look like:
  #
  # class MyComponent < ViewComponent::Base
  #   has_one :header, HeaderComponent
  #
  #   class HeaderComponent < ViewComponent::Base
  #     def name
  #       @name
  #     end
  #   end
  # end
  #
  # source://view_component//lib/view_component/slot_v2.rb#85
  def method_missing(symbol, *args, **_arg2, &block); end

  # Used to render the slot content in the template
  #
  # There's currently 3 different values that may be set, that we can render.
  #
  # If the slot renderable is a component, the string class name of a
  # component, or a function that returns a component, we render that
  # component instance, returning the string.
  #
  # If the slot renderable is a function and returns a string, it's
  # set as `@__vc_content` and is returned directly.
  #
  # If there is no slot renderable, we evaluate the block passed to
  # the slot and return it.
  #
  # source://view_component//lib/view_component/slot_v2.rb#28
  def to_s; end

  private

  # @return [Boolean]
  #
  # source://view_component//lib/view_component/slot_v2.rb#94
  def respond_to_missing?(symbol, include_all = T.unsafe(nil)); end
end

# source://view_component//lib/view_component/slotable.rb#8
module ViewComponent::Slotable
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ViewComponent::Slotable::ClassMethods

  # Build a Slot instance on a component,
  # exposing it for use inside the
  # component template.
  #
  # slot: Name of Slot, in symbol form
  # **args: Arguments to be passed to Slot initializer
  #
  # For example:
  # <%= render(SlotsComponent.new) do |component| %>
  #   <% component.slot(:footer, class_names: "footer-class") do %>
  #     <p>This is my footer!</p>
  #   <% end %>
  # <% end %>
  #
  # source://view_component//lib/view_component/slotable.rb#107
  def slot(slot_name, **args, &block); end

  module GeneratedClassMethods
    def slots; end
    def slots=(value); end
    def slots?; end
  end

  module GeneratedInstanceMethods
    def slots; end
    def slots=(value); end
    def slots?; end
  end
end

# source://view_component//lib/view_component/slotable.rb#0
module ViewComponent::Slotable::ClassMethods
  # source://view_component//lib/view_component/slotable.rb#84
  def inherited(child); end

  # source://view_component//lib/view_component/slotable.rb#25
  def with_slot(*slot_names, collection: T.unsafe(nil), class_name: T.unsafe(nil)); end
end

# source://view_component//lib/view_component/slotable_v2.rb#7
module ViewComponent::SlotableV2
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ViewComponent::SlotableV2::ClassMethods

  # source://view_component//lib/view_component/slotable_v2.rb#278
  def get_slot(slot_name); end

  # source://view_component//lib/view_component/slotable_v2.rb#295
  def set_slot(slot_name, slot_definition = T.unsafe(nil), *args, **_arg3, &block); end

  module GeneratedClassMethods
    def registered_slots; end
    def registered_slots=(value); end
    def registered_slots?; end
  end

  module GeneratedInstanceMethods
    def registered_slots; end
    def registered_slots=(value); end
    def registered_slots?; end
  end
end

# source://view_component//lib/view_component/slotable_v2.rb#0
module ViewComponent::SlotableV2::ClassMethods
  # source://view_component//lib/view_component/slotable_v2.rb#192
  def inherited(child); end

  # source://view_component//lib/view_component/slotable_v2.rb#133
  def renders_many(slot_name, callable = T.unsafe(nil)); end

  # source://view_component//lib/view_component/slotable_v2.rb#71
  def renders_one(slot_name, callable = T.unsafe(nil)); end

  # source://view_component//lib/view_component/slotable_v2.rb#179
  def slot_type(slot_name); end

  private

  # source://view_component//lib/view_component/slotable_v2.rb#203
  def define_slot(slot_name, collection:, callable:); end

  # source://view_component//lib/view_component/slotable_v2.rb#266
  def raise_if_slot_ends_with_question_mark(slot_name); end

  # source://view_component//lib/view_component/slotable_v2.rb#256
  def raise_if_slot_registered(slot_name); end

  # source://view_component//lib/view_component/slotable_v2.rb#199
  def register_slot(slot_name, **kwargs); end

  # source://view_component//lib/view_component/slotable_v2.rb#232
  def validate_plural_slot_name(slot_name); end

  # source://view_component//lib/view_component/slotable_v2.rb#244
  def validate_singular_slot_name(slot_name); end
end

# source://view_component//lib/view_component/slotable_v2.rb#10
ViewComponent::SlotableV2::RESERVED_NAMES = T.let(T.unsafe(nil), Hash)

# source://view_component//lib/view_component/template_error.rb#4
class ViewComponent::TemplateError < ::StandardError
  # @return [TemplateError] a new instance of TemplateError
  #
  # source://view_component//lib/view_component/template_error.rb#5
  def initialize(errors); end
end

# source://view_component//lib/view_component/test_case.rb#6
class ViewComponent::TestCase < ::ActiveSupport::TestCase
  include ::Capybara::Minitest::Assertions
  include ::ViewComponent::TestHelpers
end

# source://view_component//lib/view_component/test_helpers.rb#6
module ViewComponent::TestHelpers
  include ::Capybara::Minitest::Assertions

  # @private
  #
  # source://view_component//lib/view_component/test_helpers.rb#162
  def build_controller(klass); end

  # @private
  #
  # source://view_component//lib/view_component/test_helpers.rb#81
  def controller; end

  # source://view_component//lib/view_component/test_helpers.rb#11
  def page; end

  # source://view_component//lib/view_component/test_helpers.rb#15
  def refute_component_rendered; end

  # Execute the given block in the view context. Internally sets `page` to be a
  # `Capybara::Node::Simple`, allowing for Capybara assertions to be used:
  #
  # ```ruby
  # render_in_view_context do
  #   render(MyComponent.new)
  # end
  #
  # assert_text("Hello, World!")
  # ```
  #
  # source://view_component//lib/view_component/test_helpers.rb#75
  def render_in_view_context(&block); end

  # Render a component inline. Internally sets `page` to be a `Capybara::Node::Simple`,
  # allowing for Capybara assertions to be used:
  #
  # ```ruby
  # render_inline(MyComponent.new)
  # assert_text("Hello, World!")
  # ```
  #
  # @param component [ViewComponent::Base, ViewComponent::Collection] The instance of the component to be rendered.
  # @return [Nokogiri::HTML]
  #
  # source://view_component//lib/view_component/test_helpers.rb#54
  def render_inline(component, **args, &block); end

  # source://view_component//lib/view_component/test_helpers.rb#35
  def rendered_component; end

  # @private
  #
  # source://view_component//lib/view_component/test_helpers.rb#33
  def rendered_content; end

  # @private
  #
  # source://view_component//lib/view_component/test_helpers.rb#86
  def request; end

  # Set the controller to be used while executing the given block,
  # allowing access to controller-specific methods:
  #
  # ```ruby
  # with_controller_class(UsersController) do
  #   render_inline(MyComponent.new)
  # end
  # ```
  #
  # @param klass [ActionController::Base] The controller to be used.
  #
  # source://view_component//lib/view_component/test_helpers.rb#123
  def with_controller_class(klass); end

  # Set the URL of the current request (such as when using request-dependent path helpers):
  #
  # ```ruby
  # with_request_url("/users/42") do
  #   render_inline(MyComponent.new)
  # end
  # ```
  #
  # @param path [String] The path to set for the current request.
  #
  # source://view_component//lib/view_component/test_helpers.rb#141
  def with_request_url(path); end

  # Set the Action Pack request variant for the given block:
  #
  # ```ruby
  # with_variant(:phone) do
  #   render_inline(MyComponent.new)
  # end
  # ```
  #
  # @param variant [Symbol] The variant to be set for the provided block.
  #
  # source://view_component//lib/view_component/test_helpers.rb#104
  def with_variant(variant); end
end

# source://view_component//lib/view_component/translatable.rb#9
module ViewComponent::Translatable
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ViewComponent::Translatable::ClassMethods

  # source://view_component//lib/view_component/translatable.rb#105
  def html_safe_translation(translation); end

  # Exposes .i18n_scope as an instance method
  #
  # source://view_component//lib/view_component/translatable.rb#101
  def i18n_scope; end

  # source://view_component//lib/view_component/translatable.rb#63
  def t(key = T.unsafe(nil), **options); end

  # source://view_component//lib/view_component/translatable.rb#63
  def translate(key = T.unsafe(nil), **options); end

  private

  # source://view_component//lib/view_component/translatable.rb#118
  def html_escape_translation_options!(options); end

  # @return [Boolean]
  #
  # source://view_component//lib/view_component/translatable.rb#126
  def i18n_option?(name); end

  module GeneratedClassMethods
    def i18n_backend; end
    def i18n_backend=(value); end
  end

  module GeneratedInstanceMethods
    def i18n_backend; end
  end
end

# source://view_component//lib/view_component/translatable.rb#0
module ViewComponent::Translatable::ClassMethods
  # source://view_component//lib/view_component/translatable.rb#23
  def build_i18n_backend; end

  # source://view_component//lib/view_component/translatable.rb#19
  def i18n_scope; end
end

# source://view_component//lib/view_component/translatable.rb#12
ViewComponent::Translatable::HTML_SAFE_TRANSLATION_KEY = T.let(T.unsafe(nil), Regexp)

# source://view_component//lib/view_component/translatable.rb#38
class ViewComponent::Translatable::I18nBackend < ::I18n::Backend::Simple
  # @return [I18nBackend] a new instance of I18nBackend
  #
  # source://view_component//lib/view_component/translatable.rb#41
  def initialize(i18n_scope:, load_paths:); end

  # Ensure the Simple backend won't load paths from ::I18n.load_path
  #
  # source://view_component//lib/view_component/translatable.rb#47
  def load_translations; end

  # source://view_component//lib/view_component/translatable.rb#51
  def scope_data(data); end

  # source://view_component//lib/view_component/translatable.rb#58
  def store_translations(locale, data, options = T.unsafe(nil)); end
end

# source://view_component//lib/view_component/translatable.rb#39
ViewComponent::Translatable::I18nBackend::EMPTY_HASH = T.let(T.unsafe(nil), Hash)

# source://view_component//lib/view_component/with_content_helper.rb#4
module ViewComponent::WithContentHelper
  # source://view_component//lib/view_component/with_content_helper.rb#5
  def with_content(value); end
end

class ViewComponentsController < ::Rails::ApplicationController
  include ::ViewComponent::PreviewActions

  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end
